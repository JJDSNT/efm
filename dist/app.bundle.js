/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./efm.js":
/*!****************!*\
  !*** ./efm.js ***!
  \****************/
/***/ (() => {

eval("/*\n * EFM - Epub for Monocle\n * \n * A pure-javascript implementation of the book data object for Monocle.\n * \n * Copyright (c) 2013 Robert Schroll\n * \n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n * \n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nMIMETYPES = {\n  png: \"image/png\",\n  gif: \"image/gif\",\n  jpg: \"image/jpeg\",\n  jpeg: \"image/jpeg\",\n  js: \"text/javascript\",\n  css: \"text/css\",\n  svg: \"image/svg+xml\"\n};\nURL_TAGS = {\n  img: \"src\",\n  link: \"href\",\n  image: \"xlink:href\" // Image in in-line SVG.  (Calibre uses these for covers.)\n\n}; // Get the directory portion of path.  The path separator is '/', for\n// use with zip files.\n\nfunction getDir(path) {\n  return path.split('/').slice(0, -1).join('/');\n} // Join and normalize the two paths.  The path separator is '/', for use\n// with zip files.\n\n\nfunction joinPaths(path1, path2) {\n  var path = path1.split('/').concat(path2.split('/')),\n      normpath = [];\n\n  for (var i in path) {\n    var dir = path[i];\n    if (dir == \"..\") normpath.pop();else if (dir != \".\" && dir != \"\") normpath.push(dir);\n  }\n\n  return normpath.join('/');\n} // A book data object for the Epub file 'epubfile', a HTML5 File object.\n// The callback will be called when this object is fully initialized,\n// with this object as an argument.\n\n\nfunction Epub(epubfile, callback) {\n  var files = {}; // Maps filename to zip.Entry\n\n  var spine = []; // List of filenames in spine\n\n  var contents = []; // Table of contents\n\n  var metadata = {}; // Maps keys to metadata\n\n  var data_urls = {}; // Maps filename to data URL of file contents\n\n  var num_data_urls = 0;\n  zip.createReader(new zip.BlobReader(epubfile), function (zipReader) {\n    zipReader.getEntries(function (entries) {\n      for (var i in entries) {\n        var e = entries[i];\n        files[e.filename] = e;\n      }\n\n      zipReader.close();\n      getComponent(\"META-INF/container.xml\", findOPF); // This starts a chain of callbacks, which will eventually\n      // end with onLoaded().\n    });\n  }, console.error); // Find the location of the OPF file from container.xml\n\n  function findOPF(xml) {\n    var doc = new DOMParser().parseFromString(xml, \"text/xml\");\n    var opffn = doc.getElementsByTagName(\"rootfile\")[0].getAttribute(\"full-path\");\n    getComponent(opffn, parseOPF(getDir(opffn)));\n  }\n\n  ; // Parse the OPF file to get the spine, the table of contents, and\n  // the metadata.\n\n  function parseOPF(reldir) {\n    return function (xml) {\n      var doc = new DOMParser().parseFromString(xml, \"text/xml\");\n      var idmap = {};\n      var nav_href = null; // Parse manifest\n\n      var manifest = doc.getElementsByTagName(\"manifest\")[0];\n      var items = manifest.getElementsByTagName(\"item\");\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var id = item.getAttribute(\"id\");\n        var href = item.getAttribute(\"href\");\n        idmap[id] = joinPaths(reldir, href);\n        var props = item.getAttribute(\"properties\");\n        if (props != null && props.split(\" \").indexOf(\"nav\") > -1) nav_href = idmap[id];\n      } // Parse spine\n\n\n      var spineel = doc.getElementsByTagName(\"spine\")[0];\n      var sitems = spineel.getElementsByTagName(\"itemref\");\n\n      for (var i = 0; i < sitems.length; i++) {\n        var id = sitems[i].getAttribute(\"idref\");\n        spine.push(idmap[id]);\n      } // Parse table of contents\n\n\n      if (nav_href != null) {\n        // Epub3 navigation\n        getComponent(nav_href, parseNav(getDir(nav_href)));\n      } else {\n        // Epub2 navigation\n        var ncxfile = idmap[spineel.getAttribute(\"toc\")];\n        if (ncxfile != undefined) getComponent(ncxfile, parseNCX(getDir(ncxfile)));\n      } // Parse metadata\n\n\n      var metadatael = doc.getElementsByTagName(\"metadata\")[0];\n\n      for (var i = 0; i < metadatael.childNodes.length; i++) {\n        var node = metadatael.childNodes[i];\n        if (node.nodeType == 1 && node.firstChild != null) metadata[node.localName] = node.firstChild.nodeValue;\n      } // Make data URLs for auxillary files, for future use\n\n\n      for (var fn in files) {\n        if (spine.indexOf(fn) == -1 && [\"mimetype\", \"META-INF/container.xml\"].indexOf(fn) == -1) {\n          num_data_urls += 1;\n          getEncodedComponent(fn, function (f) {\n            return function (data) {\n              data_urls[f] = data;\n              num_data_urls -= 1;\n              if (num_data_urls == 0) onLoaded();\n            };\n          }(fn));\n        }\n      }\n\n      if (num_data_urls == 0) {\n        onLoaded();\n      }\n    };\n  }\n\n  ; // Parse the Epub3 table of contents.\n\n  function parseNav(reldir) {\n    return function (navdata) {\n      var navdoc = new DOMParser().parseFromString(navdata, \"text/xml\");\n      var navs = navdoc.getElementsByTagName(\"nav\");\n\n      for (var i = 0; i < navs.length; i++) {\n        var nav = navs[i];\n        if (nav.getAttribute(\"epub:type\") == \"toc\") contents = parseNavList(nav.getElementsByTagName(\"ol\")[0], reldir);\n      }\n    };\n  }\n\n  ;\n\n  function parseNavList(element, reldir) {\n    var children = [];\n\n    for (var i = 0; i < element.childNodes.length; i++) {\n      var node = element.childNodes[i];\n\n      if (node.nodeType == 1 && node.nodeName == \"li\") {\n        var link = node.getElementsByTagName(\"a\")[0];\n\n        if (link != undefined) {\n          var child = {\n            title: link.firstChild.nodeValue,\n            src: joinPaths(reldir, link.getAttribute(\"href\"))\n          };\n          var olist = node.getElementsByTagName(\"ol\")[0];\n          if (olist != undefined) child[\"children\"] = parseNavList(olist, reldir);\n          children.push(child);\n        }\n      }\n    }\n\n    return children;\n  }\n\n  ; // Parse the Epub2 table of contents.\n\n  function parseNCX(reldir) {\n    return function (ncxdata) {\n      var ncx = new DOMParser().parseFromString(ncxdata, \"text/xml\");\n      var navmap = ncx.getElementsByTagName(\"navMap\")[0];\n      contents = parseNCXChildren(navmap, reldir);\n    };\n  }\n\n  ;\n\n  function parseNCXChildren(element, reldir) {\n    var children = [];\n\n    for (var i = 0; i < element.childNodes.length; i++) {\n      var node = element.childNodes[i];\n\n      if (node.nodeType == 1 && node.nodeName == \"navPoint\") {\n        var child = {};\n        var nav_label = node.getElementsByTagName(\"text\")[0];\n        child[\"title\"] = nav_label.firstChild.nodeValue;\n        var content = node.getElementsByTagName(\"content\")[0];\n        child[\"src\"] = joinPaths(reldir, content.getAttribute(\"src\"));\n        var child_nav = parseNCXChildren(node, reldir);\n        if (child_nav.length > 0) child[\"children\"] = child_nav;\n        children.push(child);\n      }\n    }\n\n    return children;\n  }\n\n  ; // Part of Monocle's book data object interface.\n\n  this.getComponents = function () {\n    return spine;\n  }; // Part of Monocle's book data object interface.\n\n\n  this.getContents = function () {\n    return contents;\n  }; // Part of Monocle's book data object interface.\n  // Note that (X|HT)ML files are parsed and URLs in <img> and <link>\n  // to resouces in the Epub are replaced with data URLs.\n\n\n  function getComponent(id, callback) {\n    var reldir = getDir(id);\n    var ext = id.split('.').slice(-1)[0];\n\n    if ([\"html\", \"htm\", \"xhtml\", \"xml\"].indexOf(ext) != -1) {\n      files[id].getData(new zip.TextWriter(), function (data) {\n        var doc = new DOMParser().parseFromString(data, \"text/xml\");\n\n        for (var tag in URL_TAGS) {\n          var attribute = URL_TAGS[tag];\n          var elements = doc.getElementsByTagName(tag);\n\n          for (var i = 0; i < elements.length; i++) {\n            var element = elements[i];\n            var path = joinPaths(reldir, element.getAttribute(attribute));\n            var data_url = data_urls[path];\n            if (data_url != undefined) element.setAttribute(attribute, data_url);\n          }\n        }\n\n        callback(new XMLSerializer().serializeToString(doc));\n      });\n    } else {\n      files[id].getData(new zip.TextWriter(), function (data) {\n        callback(data);\n      });\n    }\n  }\n\n  ;\n  this.getComponent = getComponent; // Return the content, via the callback, as a data URL.\n\n  function getEncodedComponent(id, callback) {\n    var mime = MIMETYPES[id.split('.').slice(-1)[0]];\n    files[id].getData(new zip.Data64URIWriter(mime), function (data) {\n      callback(data);\n    });\n  }\n\n  ; // Part of Monocle's book data object interface.\n\n  this.getMetaData = function (key) {\n    return metadata[key];\n  }; // Called at the end of the initialization process.  At this point,\n  // the object is ready to be passed to a Monocle.Reader.\n\n\n  var onLoaded = function (self) {\n    return function () {\n      callback(self);\n    };\n  }(this);\n}\n\n//# sourceURL=webpack://webpack-demo/./efm.js?");

/***/ }),

/***/ "./js/deflate.js":
/*!***********************!*\
  !*** ./js/deflate.js ***!
  \***********************/
/***/ (function() {

eval("/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n(function (obj) {\n  // Global\n  var MAX_BITS = 15;\n  var D_CODES = 30;\n  var BL_CODES = 19;\n  var LENGTH_CODES = 29;\n  var LITERALS = 256;\n  var L_CODES = LITERALS + 1 + LENGTH_CODES;\n  var HEAP_SIZE = 2 * L_CODES + 1;\n  var END_BLOCK = 256; // Bit length codes must not exceed MAX_BL_BITS bits\n\n  var MAX_BL_BITS = 7; // repeat previous bit length 3-6 times (2 bits of repeat count)\n\n  var REP_3_6 = 16; // repeat a zero length 3-10 times (3 bits of repeat count)\n\n  var REPZ_3_10 = 17; // repeat a zero length 11-138 times (7 bits of repeat count)\n\n  var REPZ_11_138 = 18; // The lengths of the bit length codes are sent in order of decreasing\n  // probability, to avoid transmitting the lengths for unused bit\n  // length codes.\n\n  var Buf_size = 8 * 2; // JZlib version : \"1.0.2\"\n\n  var Z_DEFAULT_COMPRESSION = -1; // compression strategy\n\n  var Z_FILTERED = 1;\n  var Z_HUFFMAN_ONLY = 2;\n  var Z_DEFAULT_STRATEGY = 0;\n  var Z_NO_FLUSH = 0;\n  var Z_PARTIAL_FLUSH = 1;\n  var Z_FULL_FLUSH = 3;\n  var Z_FINISH = 4;\n  var Z_OK = 0;\n  var Z_STREAM_END = 1;\n  var Z_NEED_DICT = 2;\n  var Z_STREAM_ERROR = -2;\n  var Z_DATA_ERROR = -3;\n  var Z_BUF_ERROR = -5; // Tree\n  // see definition of array dist_code below\n\n  var _dist_code = [0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29];\n\n  function Tree() {\n    var that = this; // dyn_tree; // the dynamic tree\n    // max_code; // largest code with non zero frequency\n    // stat_desc; // the corresponding static tree\n    // Compute the optimal bit lengths for a tree and update the total bit\n    // length\n    // for the current block.\n    // IN assertion: the fields freq and dad are set, heap[heap_max] and\n    // above are the tree nodes sorted by increasing frequency.\n    // OUT assertions: the field len is set to the optimal bit length, the\n    // array bl_count contains the frequencies for each bit length.\n    // The length opt_len is updated; static_len is also updated if stree is\n    // not null.\n\n    function gen_bitlen(s) {\n      var tree = that.dyn_tree;\n      var stree = that.stat_desc.static_tree;\n      var extra = that.stat_desc.extra_bits;\n      var base = that.stat_desc.extra_base;\n      var max_length = that.stat_desc.max_length;\n      var h; // heap index\n\n      var n, m; // iterate over the tree elements\n\n      var bits; // bit length\n\n      var xbits; // extra bits\n\n      var f; // frequency\n\n      var overflow = 0; // number of elements with bit length too large\n\n      for (bits = 0; bits <= MAX_BITS; bits++) s.bl_count[bits] = 0; // In a first pass, compute the optimal bit lengths (which may\n      // overflow in the case of the bit length tree).\n\n\n      tree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\n\n      for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n        n = s.heap[h];\n        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n\n        if (bits > max_length) {\n          bits = max_length;\n          overflow++;\n        }\n\n        tree[n * 2 + 1] = bits; // We overwrite tree[n*2+1] which is no longer needed\n\n        if (n > that.max_code) continue; // not a leaf node\n\n        s.bl_count[bits]++;\n        xbits = 0;\n        if (n >= base) xbits = extra[n - base];\n        f = tree[n * 2];\n        s.opt_len += f * (bits + xbits);\n        if (stree) s.static_len += f * (stree[n * 2 + 1] + xbits);\n      }\n\n      if (overflow === 0) return; // This happens for example on obj2 and pic of the Calgary corpus\n      // Find the first bit length which could increase:\n\n      do {\n        bits = max_length - 1;\n\n        while (s.bl_count[bits] === 0) bits--;\n\n        s.bl_count[bits]--; // move one leaf down the tree\n\n        s.bl_count[bits + 1] += 2; // move one overflow item as its brother\n\n        s.bl_count[max_length]--; // The brother of the overflow item also moves one step up,\n        // but this does not affect bl_count[max_length]\n\n        overflow -= 2;\n      } while (overflow > 0);\n\n      for (bits = max_length; bits !== 0; bits--) {\n        n = s.bl_count[bits];\n\n        while (n !== 0) {\n          m = s.heap[--h];\n          if (m > that.max_code) continue;\n\n          if (tree[m * 2 + 1] != bits) {\n            s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n            tree[m * 2 + 1] = bits;\n          }\n\n          n--;\n        }\n      }\n    } // Reverse the first len bits of a code, using straightforward code (a\n    // faster\n    // method would use a table)\n    // IN assertion: 1 <= len <= 15\n\n\n    function bi_reverse(code, // the value to invert\n    len // its bit length\n    ) {\n      var res = 0;\n\n      do {\n        res |= code & 1;\n        code >>>= 1;\n        res <<= 1;\n      } while (--len > 0);\n\n      return res >>> 1;\n    } // Generate the codes for a given tree and bit counts (which need not be\n    // optimal).\n    // IN assertion: the array bl_count contains the bit length statistics for\n    // the given tree and the field len is set for all tree elements.\n    // OUT assertion: the field code is set for all tree elements of non\n    // zero code length.\n\n\n    function gen_codes(tree, // the tree to decorate\n    max_code, // largest code with non zero frequency\n    bl_count // number of codes at each bit length\n    ) {\n      var next_code = []; // next code value for each\n      // bit length\n\n      var code = 0; // running code value\n\n      var bits; // bit index\n\n      var n; // code index\n\n      var len; // The distribution counts are first used to generate the code values\n      // without bit reversal.\n\n      for (bits = 1; bits <= MAX_BITS; bits++) {\n        next_code[bits] = code = code + bl_count[bits - 1] << 1;\n      } // Check that the bit counts in bl_count are consistent. The last code\n      // must be all ones.\n      // Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n      // \"inconsistent bit counts\");\n      // Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n\n      for (n = 0; n <= max_code; n++) {\n        len = tree[n * 2 + 1];\n        if (len === 0) continue; // Now reverse the bits\n\n        tree[n * 2] = bi_reverse(next_code[len]++, len);\n      }\n    } // Construct one Huffman tree and assigns the code bit strings and lengths.\n    // Update the total bit length for the current block.\n    // IN assertion: the field freq is set for all tree elements.\n    // OUT assertions: the fields len and code are set to the optimal bit length\n    // and corresponding code. The length opt_len is updated; static_len is\n    // also updated if stree is not null. The field max_code is set.\n\n\n    that.build_tree = function (s) {\n      var tree = that.dyn_tree;\n      var stree = that.stat_desc.static_tree;\n      var elems = that.stat_desc.elems;\n      var n, m; // iterate over heap elements\n\n      var max_code = -1; // largest code with non zero frequency\n\n      var node; // new node being created\n      // Construct the initial heap, with least frequent element in\n      // heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n      // heap[0] is not used.\n\n      s.heap_len = 0;\n      s.heap_max = HEAP_SIZE;\n\n      for (n = 0; n < elems; n++) {\n        if (tree[n * 2] !== 0) {\n          s.heap[++s.heap_len] = max_code = n;\n          s.depth[n] = 0;\n        } else {\n          tree[n * 2 + 1] = 0;\n        }\n      } // The pkzip format requires that at least one distance code exists,\n      // and that at least one bit should be sent even if there is only one\n      // possible code. So to avoid special checks later on we force at least\n      // two codes of non zero frequency.\n\n\n      while (s.heap_len < 2) {\n        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n        tree[node * 2] = 1;\n        s.depth[node] = 0;\n        s.opt_len--;\n        if (stree) s.static_len -= stree[node * 2 + 1]; // node is 0 or 1 so it does not have extra bits\n      }\n\n      that.max_code = max_code; // The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n      // establish sub-heaps of increasing lengths:\n\n      for (n = Math.floor(s.heap_len / 2); n >= 1; n--) s.pqdownheap(tree, n); // Construct the Huffman tree by repeatedly combining the least two\n      // frequent nodes.\n\n\n      node = elems; // next internal node of the tree\n\n      do {\n        // n = node of least frequency\n        n = s.heap[1];\n        s.heap[1] = s.heap[s.heap_len--];\n        s.pqdownheap(tree, 1);\n        m = s.heap[1]; // m = node of next least frequency\n\n        s.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\n\n        s.heap[--s.heap_max] = m; // Create a new node father of n and m\n\n        tree[node * 2] = tree[n * 2] + tree[m * 2];\n        s.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\n        tree[n * 2 + 1] = tree[m * 2 + 1] = node; // and insert the new node in the heap\n\n        s.heap[1] = node++;\n        s.pqdownheap(tree, 1);\n      } while (s.heap_len >= 2);\n\n      s.heap[--s.heap_max] = s.heap[1]; // At this point, the fields freq and dad are set. We can now\n      // generate the bit lengths.\n\n      gen_bitlen(s); // The field len is now set, we can generate the bit codes\n\n      gen_codes(tree, that.max_code, s.bl_count);\n    };\n  }\n\n  Tree._length_code = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28];\n  Tree.base_length = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0];\n  Tree.base_dist = [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576]; // Mapping from a distance to a distance code. dist is the distance - 1 and\n  // must not have side effects. _dist_code[256] and _dist_code[257] are never\n  // used.\n\n  Tree.d_code = function (dist) {\n    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n  }; // extra bits for each length code\n\n\n  Tree.extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]; // extra bits for each distance code\n\n  Tree.extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]; // extra bits for each bit length code\n\n  Tree.extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];\n  Tree.bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]; // StaticTree\n\n  function StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\n    var that = this;\n    that.static_tree = static_tree;\n    that.extra_bits = extra_bits;\n    that.extra_base = extra_base;\n    that.elems = elems;\n    that.max_length = max_length;\n  }\n\n  StaticTree.static_ltree = [12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8, 130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42, 8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8, 22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8, 222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113, 8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8, 69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8, 173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9, 51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9, 427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379, 9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23, 9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9, 399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9, 223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7, 40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8, 99, 8, 227, 8];\n  StaticTree.static_dtree = [0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5, 25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5];\n  StaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  StaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\n  StaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS); // Deflate\n\n  var MAX_MEM_LEVEL = 9;\n  var DEF_MEM_LEVEL = 8;\n\n  function Config(good_length, max_lazy, nice_length, max_chain, func) {\n    var that = this;\n    that.good_length = good_length;\n    that.max_lazy = max_lazy;\n    that.nice_length = nice_length;\n    that.max_chain = max_chain;\n    that.func = func;\n  }\n\n  var STORED = 0;\n  var FAST = 1;\n  var SLOW = 2;\n  var config_table = [new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST), new Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW), new Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW)];\n  var z_errmsg = [\"need dictionary\", // Z_NEED_DICT\n  // 2\n  \"stream end\", // Z_STREAM_END 1\n  \"\", // Z_OK 0\n  \"\", // Z_ERRNO (-1)\n  \"stream error\", // Z_STREAM_ERROR (-2)\n  \"data error\", // Z_DATA_ERROR (-3)\n  \"\", // Z_MEM_ERROR (-4)\n  \"buffer error\", // Z_BUF_ERROR (-5)\n  \"\", // Z_VERSION_ERROR (-6)\n  \"\"]; // block not completed, need more input or more output\n\n  var NeedMore = 0; // block flush performed\n\n  var BlockDone = 1; // finish started, need only more output at next deflate\n\n  var FinishStarted = 2; // finish done, accept no more input or output\n\n  var FinishDone = 3; // preset dictionary flag in zlib header\n\n  var PRESET_DICT = 0x20;\n  var INIT_STATE = 42;\n  var BUSY_STATE = 113;\n  var FINISH_STATE = 666; // The deflate compression method\n\n  var Z_DEFLATED = 8;\n  var STORED_BLOCK = 0;\n  var STATIC_TREES = 1;\n  var DYN_TREES = 2;\n  var MIN_MATCH = 3;\n  var MAX_MATCH = 258;\n  var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;\n\n  function smaller(tree, n, m, depth) {\n    var tn2 = tree[n * 2];\n    var tm2 = tree[m * 2];\n    return tn2 < tm2 || tn2 == tm2 && depth[n] <= depth[m];\n  }\n\n  function Deflate() {\n    var that = this;\n    var strm; // pointer back to this zlib stream\n\n    var status; // as the name implies\n    // pending_buf; // output still pending\n\n    var pending_buf_size; // size of pending_buf\n    // pending_out; // next pending byte to output to the stream\n    // pending; // nb of bytes in the pending buffer\n\n    var method; // STORED (for zip only) or DEFLATED\n\n    var last_flush; // value of flush param for previous deflate call\n\n    var w_size; // LZ77 window size (32K by default)\n\n    var w_bits; // log2(w_size) (8..16)\n\n    var w_mask; // w_size - 1\n\n    var window; // Sliding window. Input bytes are read into the second half of the window,\n    // and move to the first half later to keep a dictionary of at least wSize\n    // bytes. With this organization, matches are limited to a distance of\n    // wSize-MAX_MATCH bytes, but this ensures that IO is always\n    // performed with a length multiple of the block size. Also, it limits\n    // the window size to 64K, which is quite useful on MSDOS.\n    // To do: use the user input buffer as sliding window.\n\n    var window_size; // Actual size of window: 2*wSize, except when the user input buffer\n    // is directly used as sliding window.\n\n    var prev; // Link to older string with same hash index. To limit the size of this\n    // array to 64K, this link is maintained only for the last 32K strings.\n    // An index in this array is thus a window index modulo 32K.\n\n    var head; // Heads of the hash chains or NIL.\n\n    var ins_h; // hash index of string to be inserted\n\n    var hash_size; // number of elements in hash table\n\n    var hash_bits; // log2(hash_size)\n\n    var hash_mask; // hash_size-1\n    // Number of bits by which ins_h must be shifted at each input\n    // step. It must be such that after MIN_MATCH steps, the oldest\n    // byte no longer takes part in the hash key, that is:\n    // hash_shift * MIN_MATCH >= hash_bits\n\n    var hash_shift; // Window position at the beginning of the current output block. Gets\n    // negative when the window is moved backwards.\n\n    var block_start;\n    var match_length; // length of best match\n\n    var prev_match; // previous match\n\n    var match_available; // set if previous match exists\n\n    var strstart; // start of string to insert\n\n    var match_start; // start of matching string\n\n    var lookahead; // number of valid bytes ahead in window\n    // Length of the best match at previous step. Matches not greater than this\n    // are discarded. This is used in the lazy match evaluation.\n\n    var prev_length; // To speed up deflation, hash chains are never searched beyond this\n    // length. A higher limit improves compression ratio but degrades the speed.\n\n    var max_chain_length; // Attempt to find a better match only when the current match is strictly\n    // smaller than this value. This mechanism is used only for compression\n    // levels >= 4.\n\n    var max_lazy_match; // Insert new strings in the hash table only if the match length is not\n    // greater than this length. This saves time but degrades compression.\n    // max_insert_length is used only for compression levels <= 3.\n\n    var level; // compression level (1..9)\n\n    var strategy; // favor or force Huffman coding\n    // Use a faster search when the previous match is longer than this\n\n    var good_match; // Stop searching when current match exceeds this\n\n    var nice_match;\n    var dyn_ltree; // literal and length tree\n\n    var dyn_dtree; // distance tree\n\n    var bl_tree; // Huffman tree for bit lengths\n\n    var l_desc = new Tree(); // desc for literal tree\n\n    var d_desc = new Tree(); // desc for distance tree\n\n    var bl_desc = new Tree(); // desc for bit length tree\n    // that.heap_len; // number of elements in the heap\n    // that.heap_max; // element of largest frequency\n    // The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n    // The same heap array is used to build all trees.\n    // Depth of each subtree used as tie breaker for trees of equal frequency\n\n    that.depth = [];\n    var l_buf; // index for literals or lengths */\n    // Size of match buffer for literals/lengths. There are 4 reasons for\n    // limiting lit_bufsize to 64K:\n    // - frequencies can be kept in 16 bit counters\n    // - if compression is not successful for the first block, all input\n    // data is still in the window so we can still emit a stored block even\n    // when input comes from standard input. (This can also be done for\n    // all blocks if lit_bufsize is not greater than 32K.)\n    // - if compression is not successful for a file smaller than 64K, we can\n    // even emit a stored file instead of a stored block (saving 5 bytes).\n    // This is applicable only for zip (not gzip or zlib).\n    // - creating new Huffman trees less frequently may not provide fast\n    // adaptation to changes in the input data statistics. (Take for\n    // example a binary file with poorly compressible code followed by\n    // a highly compressible string table.) Smaller buffer sizes give\n    // fast adaptation but have of course the overhead of transmitting\n    // trees more frequently.\n    // - I can't count above 4\n\n    var lit_bufsize;\n    var last_lit; // running index in l_buf\n    // Buffer for distances. To simplify the code, d_buf and l_buf have\n    // the same number of elements. To use different lengths, an extra flag\n    // array would be necessary.\n\n    var d_buf; // index of pendig_buf\n    // that.opt_len; // bit length of current block with optimal trees\n    // that.static_len; // bit length of current block with static trees\n\n    var matches; // number of string matches in current block\n\n    var last_eob_len; // bit length of EOB code for last block\n    // Output buffer. bits are inserted starting at the bottom (least\n    // significant bits).\n\n    var bi_buf; // Number of valid bits in bi_buf. All bits above the last valid bit\n    // are always zero.\n\n    var bi_valid; // number of codes at each bit length for an optimal tree\n\n    that.bl_count = []; // heap used to build the Huffman trees\n\n    that.heap = [];\n    dyn_ltree = [];\n    dyn_dtree = [];\n    bl_tree = [];\n\n    function lm_init() {\n      var i;\n      window_size = 2 * w_size;\n      head[hash_size - 1] = 0;\n\n      for (i = 0; i < hash_size - 1; i++) {\n        head[i] = 0;\n      } // Set the default configuration parameters:\n\n\n      max_lazy_match = config_table[level].max_lazy;\n      good_match = config_table[level].good_length;\n      nice_match = config_table[level].nice_length;\n      max_chain_length = config_table[level].max_chain;\n      strstart = 0;\n      block_start = 0;\n      lookahead = 0;\n      match_length = prev_length = MIN_MATCH - 1;\n      match_available = 0;\n      ins_h = 0;\n    }\n\n    function init_block() {\n      var i; // Initialize the trees.\n\n      for (i = 0; i < L_CODES; i++) dyn_ltree[i * 2] = 0;\n\n      for (i = 0; i < D_CODES; i++) dyn_dtree[i * 2] = 0;\n\n      for (i = 0; i < BL_CODES; i++) bl_tree[i * 2] = 0;\n\n      dyn_ltree[END_BLOCK * 2] = 1;\n      that.opt_len = that.static_len = 0;\n      last_lit = matches = 0;\n    } // Initialize the tree data structures for a new zlib stream.\n\n\n    function tr_init() {\n      l_desc.dyn_tree = dyn_ltree;\n      l_desc.stat_desc = StaticTree.static_l_desc;\n      d_desc.dyn_tree = dyn_dtree;\n      d_desc.stat_desc = StaticTree.static_d_desc;\n      bl_desc.dyn_tree = bl_tree;\n      bl_desc.stat_desc = StaticTree.static_bl_desc;\n      bi_buf = 0;\n      bi_valid = 0;\n      last_eob_len = 8; // enough lookahead for inflate\n      // Initialize the first block of the first file:\n\n      init_block();\n    } // Restore the heap property by moving down the tree starting at node k,\n    // exchanging a node with the smallest of its two sons if necessary,\n    // stopping\n    // when the heap property is re-established (each father smaller than its\n    // two sons).\n\n\n    that.pqdownheap = function (tree, // the tree to restore\n    k // node to move down\n    ) {\n      var heap = that.heap;\n      var v = heap[k];\n      var j = k << 1; // left son of k\n\n      while (j <= that.heap_len) {\n        // Set j to the smallest of the two sons:\n        if (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\n          j++;\n        } // Exit if v is smaller than both sons\n\n\n        if (smaller(tree, v, heap[j], that.depth)) break; // Exchange v with the smallest son\n\n        heap[k] = heap[j];\n        k = j; // And continue down the tree, setting j to the left son of k\n\n        j <<= 1;\n      }\n\n      heap[k] = v;\n    }; // Scan a literal or distance tree to determine the frequencies of the codes\n    // in the bit length tree.\n\n\n    function scan_tree(tree, // the tree to be scanned\n    max_code // and its largest code of non zero frequency\n    ) {\n      var n; // iterates over all tree elements\n\n      var prevlen = -1; // last emitted length\n\n      var curlen; // length of current code\n\n      var nextlen = tree[0 * 2 + 1]; // length of next code\n\n      var count = 0; // repeat count of the current code\n\n      var max_count = 7; // max repeat count\n\n      var min_count = 4; // min repeat count\n\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      }\n\n      tree[(max_code + 1) * 2 + 1] = 0xffff; // guard\n\n      for (n = 0; n <= max_code; n++) {\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1];\n\n        if (++count < max_count && curlen == nextlen) {\n          continue;\n        } else if (count < min_count) {\n          bl_tree[curlen * 2] += count;\n        } else if (curlen !== 0) {\n          if (curlen != prevlen) bl_tree[curlen * 2]++;\n          bl_tree[REP_3_6 * 2]++;\n        } else if (count <= 10) {\n          bl_tree[REPZ_3_10 * 2]++;\n        } else {\n          bl_tree[REPZ_11_138 * 2]++;\n        }\n\n        count = 0;\n        prevlen = curlen;\n\n        if (nextlen === 0) {\n          max_count = 138;\n          min_count = 3;\n        } else if (curlen == nextlen) {\n          max_count = 6;\n          min_count = 3;\n        } else {\n          max_count = 7;\n          min_count = 4;\n        }\n      }\n    } // Construct the Huffman tree for the bit lengths and return the index in\n    // bl_order of the last bit length code to send.\n\n\n    function build_bl_tree() {\n      var max_blindex; // index of last bit length code of non zero freq\n      // Determine the bit length frequencies for literal and distance trees\n\n      scan_tree(dyn_ltree, l_desc.max_code);\n      scan_tree(dyn_dtree, d_desc.max_code); // Build the bit length tree:\n\n      bl_desc.build_tree(that); // opt_len now includes the length of the tree representations, except\n      // the lengths of the bit lengths codes and the 5+5+4 bits for the\n      // counts.\n      // Determine the number of bit length codes to send. The pkzip format\n      // requires that at least 4 bit length codes be sent. (appnote.txt says\n      // 3 but the actual value used is 4.)\n\n      for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n        if (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0) break;\n      } // Update opt_len to include the bit length tree and counts\n\n\n      that.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n      return max_blindex;\n    } // Output a byte on the stream.\n    // IN assertion: there is enough room in pending_buf.\n\n\n    function put_byte(p) {\n      that.pending_buf[that.pending++] = p;\n    }\n\n    function put_short(w) {\n      put_byte(w & 0xff);\n      put_byte(w >>> 8 & 0xff);\n    }\n\n    function putShortMSB(b) {\n      put_byte(b >> 8 & 0xff);\n      put_byte(b & 0xff & 0xff);\n    }\n\n    function send_bits(value, length) {\n      var val,\n          len = length;\n\n      if (bi_valid > Buf_size - len) {\n        val = value; // bi_buf |= (val << bi_valid);\n\n        bi_buf |= val << bi_valid & 0xffff;\n        put_short(bi_buf);\n        bi_buf = val >>> Buf_size - bi_valid;\n        bi_valid += len - Buf_size;\n      } else {\n        // bi_buf |= (value) << bi_valid;\n        bi_buf |= value << bi_valid & 0xffff;\n        bi_valid += len;\n      }\n    }\n\n    function send_code(c, tree) {\n      var c2 = c * 2;\n      send_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\n    } // Send a literal or distance tree in compressed form, using the codes in\n    // bl_tree.\n\n\n    function send_tree(tree, // the tree to be sent\n    max_code // and its largest code of non zero frequency\n    ) {\n      var n; // iterates over all tree elements\n\n      var prevlen = -1; // last emitted length\n\n      var curlen; // length of current code\n\n      var nextlen = tree[0 * 2 + 1]; // length of next code\n\n      var count = 0; // repeat count of the current code\n\n      var max_count = 7; // max repeat count\n\n      var min_count = 4; // min repeat count\n\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      }\n\n      for (n = 0; n <= max_code; n++) {\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1];\n\n        if (++count < max_count && curlen == nextlen) {\n          continue;\n        } else if (count < min_count) {\n          do {\n            send_code(curlen, bl_tree);\n          } while (--count !== 0);\n        } else if (curlen !== 0) {\n          if (curlen != prevlen) {\n            send_code(curlen, bl_tree);\n            count--;\n          }\n\n          send_code(REP_3_6, bl_tree);\n          send_bits(count - 3, 2);\n        } else if (count <= 10) {\n          send_code(REPZ_3_10, bl_tree);\n          send_bits(count - 3, 3);\n        } else {\n          send_code(REPZ_11_138, bl_tree);\n          send_bits(count - 11, 7);\n        }\n\n        count = 0;\n        prevlen = curlen;\n\n        if (nextlen === 0) {\n          max_count = 138;\n          min_count = 3;\n        } else if (curlen == nextlen) {\n          max_count = 6;\n          min_count = 3;\n        } else {\n          max_count = 7;\n          min_count = 4;\n        }\n      }\n    } // Send the header for a block using dynamic Huffman trees: the counts, the\n    // lengths of the bit length codes, the literal tree and the distance tree.\n    // IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\n\n    function send_all_trees(lcodes, dcodes, blcodes) {\n      var rank; // index in bl_order\n\n      send_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n\n      send_bits(dcodes - 1, 5);\n      send_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\n\n      for (rank = 0; rank < blcodes; rank++) {\n        send_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\n      }\n\n      send_tree(dyn_ltree, lcodes - 1); // literal tree\n\n      send_tree(dyn_dtree, dcodes - 1); // distance tree\n    } // Flush the bit buffer, keeping at most 7 bits in it.\n\n\n    function bi_flush() {\n      if (bi_valid == 16) {\n        put_short(bi_buf);\n        bi_buf = 0;\n        bi_valid = 0;\n      } else if (bi_valid >= 8) {\n        put_byte(bi_buf & 0xff);\n        bi_buf >>>= 8;\n        bi_valid -= 8;\n      }\n    } // Send one empty static block to give enough lookahead for inflate.\n    // This takes 10 bits, of which 7 may remain in the bit buffer.\n    // The current inflate code requires 9 bits of lookahead. If the\n    // last two codes for the previous block (real code plus EOB) were coded\n    // on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\n    // the last real code. In this case we send two empty static blocks instead\n    // of one. (There are no problems if the previous block is stored or fixed.)\n    // To simplify the code, we assume the worst case of last real code encoded\n    // on one bit only.\n\n\n    function _tr_align() {\n      send_bits(STATIC_TREES << 1, 3);\n      send_code(END_BLOCK, StaticTree.static_ltree);\n      bi_flush(); // Of the 10 bits for the empty block, we have already sent\n      // (10 - bi_valid) bits. The lookahead for the last real code (before\n      // the EOB of the previous block) was thus at least one plus the length\n      // of the EOB plus what we have just sent of the empty static block.\n\n      if (1 + last_eob_len + 10 - bi_valid < 9) {\n        send_bits(STATIC_TREES << 1, 3);\n        send_code(END_BLOCK, StaticTree.static_ltree);\n        bi_flush();\n      }\n\n      last_eob_len = 7;\n    } // Save the match info and tally the frequency counts. Return true if\n    // the current block must be flushed.\n\n\n    function _tr_tally(dist, // distance of matched string\n    lc // match length-MIN_MATCH or unmatched char (if dist==0)\n    ) {\n      var out_length, in_length, dcode;\n      that.pending_buf[d_buf + last_lit * 2] = dist >>> 8 & 0xff;\n      that.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;\n      that.pending_buf[l_buf + last_lit] = lc & 0xff;\n      last_lit++;\n\n      if (dist === 0) {\n        // lc is the unmatched char\n        dyn_ltree[lc * 2]++;\n      } else {\n        matches++; // Here, lc is the match length - MIN_MATCH\n\n        dist--; // dist = match distance - 1\n\n        dyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\n        dyn_dtree[Tree.d_code(dist) * 2]++;\n      }\n\n      if ((last_lit & 0x1fff) === 0 && level > 2) {\n        // Compute an upper bound for the compressed length\n        out_length = last_lit * 8;\n        in_length = strstart - block_start;\n\n        for (dcode = 0; dcode < D_CODES; dcode++) {\n          out_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\n        }\n\n        out_length >>>= 3;\n        if (matches < Math.floor(last_lit / 2) && out_length < Math.floor(in_length / 2)) return true;\n      }\n\n      return last_lit == lit_bufsize - 1; // We avoid equality with lit_bufsize because of wraparound at 64K\n      // on 16 bit machines and because stored blocks are restricted to\n      // 64K-1 bytes.\n    } // Send the block data compressed using the given Huffman trees\n\n\n    function compress_block(ltree, dtree) {\n      var dist; // distance of matched string\n\n      var lc; // match length or unmatched char (if dist === 0)\n\n      var lx = 0; // running index in l_buf\n\n      var code; // the code to send\n\n      var extra; // number of extra bits to send\n\n      if (last_lit !== 0) {\n        do {\n          dist = that.pending_buf[d_buf + lx * 2] << 8 & 0xff00 | that.pending_buf[d_buf + lx * 2 + 1] & 0xff;\n          lc = that.pending_buf[l_buf + lx] & 0xff;\n          lx++;\n\n          if (dist === 0) {\n            send_code(lc, ltree); // send a literal byte\n          } else {\n            // Here, lc is the match length - MIN_MATCH\n            code = Tree._length_code[lc];\n            send_code(code + LITERALS + 1, ltree); // send the length\n            // code\n\n            extra = Tree.extra_lbits[code];\n\n            if (extra !== 0) {\n              lc -= Tree.base_length[code];\n              send_bits(lc, extra); // send the extra length bits\n            }\n\n            dist--; // dist is now the match distance - 1\n\n            code = Tree.d_code(dist);\n            send_code(code, dtree); // send the distance code\n\n            extra = Tree.extra_dbits[code];\n\n            if (extra !== 0) {\n              dist -= Tree.base_dist[code];\n              send_bits(dist, extra); // send the extra distance bits\n            }\n          } // literal or match pair ?\n          // Check that the overlay between pending_buf and d_buf+l_buf is\n          // ok:\n\n        } while (lx < last_lit);\n      }\n\n      send_code(END_BLOCK, ltree);\n      last_eob_len = ltree[END_BLOCK * 2 + 1];\n    } // Flush the bit buffer and align the output on a byte boundary\n\n\n    function bi_windup() {\n      if (bi_valid > 8) {\n        put_short(bi_buf);\n      } else if (bi_valid > 0) {\n        put_byte(bi_buf & 0xff);\n      }\n\n      bi_buf = 0;\n      bi_valid = 0;\n    } // Copy a stored block, storing first the length and its\n    // one's complement if requested.\n\n\n    function copy_block(buf, // the input data\n    len, // its length\n    header // true if block header must be written\n    ) {\n      bi_windup(); // align on byte boundary\n\n      last_eob_len = 8; // enough lookahead for inflate\n\n      if (header) {\n        put_short(len);\n        put_short(~len);\n      }\n\n      that.pending_buf.set(window.subarray(buf, buf + len), that.pending);\n      that.pending += len;\n    } // Send a stored block\n\n\n    function _tr_stored_block(buf, // input block\n    stored_len, // length of input block\n    eof // true if this is the last block for a file\n    ) {\n      send_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\n\n      copy_block(buf, stored_len, true); // with header\n    } // Determine the best encoding for the current block: dynamic trees, static\n    // trees or store, and output the encoded block to the zip file.\n\n\n    function _tr_flush_block(buf, // input block, or NULL if too old\n    stored_len, // length of input block\n    eof // true if this is the last block for a file\n    ) {\n      var opt_lenb, static_lenb; // opt_len and static_len in bytes\n\n      var max_blindex = 0; // index of last bit length code of non zero freq\n      // Build the Huffman trees unless a stored block is forced\n\n      if (level > 0) {\n        // Construct the literal and distance trees\n        l_desc.build_tree(that);\n        d_desc.build_tree(that); // At this point, opt_len and static_len are the total bit lengths\n        // of\n        // the compressed block data, excluding the tree representations.\n        // Build the bit length tree for the above two trees, and get the\n        // index\n        // in bl_order of the last bit length code to send.\n\n        max_blindex = build_bl_tree(); // Determine the best encoding. Compute first the block length in\n        // bytes\n\n        opt_lenb = that.opt_len + 3 + 7 >>> 3;\n        static_lenb = that.static_len + 3 + 7 >>> 3;\n        if (static_lenb <= opt_lenb) opt_lenb = static_lenb;\n      } else {\n        opt_lenb = static_lenb = stored_len + 5; // force a stored block\n      }\n\n      if (stored_len + 4 <= opt_lenb && buf != -1) {\n        // 4: two words for the lengths\n        // The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n        // Otherwise we can't have processed more than WSIZE input bytes\n        // since\n        // the last block flush, because compression would have been\n        // successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n        // transform a block into a stored block.\n        _tr_stored_block(buf, stored_len, eof);\n      } else if (static_lenb == opt_lenb) {\n        send_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\n        compress_block(StaticTree.static_ltree, StaticTree.static_dtree);\n      } else {\n        send_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\n        send_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\n        compress_block(dyn_ltree, dyn_dtree);\n      } // The above check is made mod 2^32, for files larger than 512 MB\n      // and uLong implemented on 32 bits.\n\n\n      init_block();\n\n      if (eof) {\n        bi_windup();\n      }\n    }\n\n    function flush_block_only(eof) {\n      _tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\n\n      block_start = strstart;\n      strm.flush_pending();\n    } // Fill the window when the lookahead becomes insufficient.\n    // Updates strstart and lookahead.\n    //\n    // IN assertion: lookahead < MIN_LOOKAHEAD\n    // OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n    // At least one byte has been read, or avail_in === 0; reads are\n    // performed for at least two bytes (required for the zip translate_eol\n    // option -- not supported here).\n\n\n    function fill_window() {\n      var n, m;\n      var p;\n      var more; // Amount of free space at the end of the window.\n\n      do {\n        more = window_size - lookahead - strstart; // Deal with !@#$% 64K limit:\n\n        if (more === 0 && strstart === 0 && lookahead === 0) {\n          more = w_size;\n        } else if (more == -1) {\n          // Very unlikely, but possible on 16 bit machine if strstart ==\n          // 0\n          // and lookahead == 1 (input done one byte at time)\n          more--; // If the window is almost full and there is insufficient\n          // lookahead,\n          // move the upper half to the lower one to make room in the\n          // upper half.\n        } else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\n          window.set(window.subarray(w_size, w_size + w_size), 0);\n          match_start -= w_size;\n          strstart -= w_size; // we now have strstart >= MAX_DIST\n\n          block_start -= w_size; // Slide the hash table (could be avoided with 32 bit values\n          // at the expense of memory usage). We slide even when level ==\n          // 0\n          // to keep the hash table consistent if we switch back to level\n          // > 0\n          // later. (Using level 0 permanently is not an optimal usage of\n          // zlib, so we don't care about this pathological case.)\n\n          n = hash_size;\n          p = n;\n\n          do {\n            m = head[--p] & 0xffff;\n            head[p] = m >= w_size ? m - w_size : 0;\n          } while (--n !== 0);\n\n          n = w_size;\n          p = n;\n\n          do {\n            m = prev[--p] & 0xffff;\n            prev[p] = m >= w_size ? m - w_size : 0; // If n is not on any hash chain, prev[n] is garbage but\n            // its value will never be used.\n          } while (--n !== 0);\n\n          more += w_size;\n        }\n\n        if (strm.avail_in === 0) return; // If there was no sliding:\n        // strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n        // more == window_size - lookahead - strstart\n        // => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n        // => more >= window_size - 2*WSIZE + 2\n        // In the BIG_MEM or MMAP case (not yet supported),\n        // window_size == input_size + MIN_LOOKAHEAD &&\n        // strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n        // Otherwise, window_size == 2*WSIZE so more >= 2.\n        // If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\n        n = strm.read_buf(window, strstart + lookahead, more);\n        lookahead += n; // Initialize the hash value now that we have some input:\n\n        if (lookahead >= MIN_MATCH) {\n          ins_h = window[strstart] & 0xff;\n          ins_h = (ins_h << hash_shift ^ window[strstart + 1] & 0xff) & hash_mask;\n        } // If the whole input has less than MIN_MATCH bytes, ins_h is\n        // garbage,\n        // but this is not important since only literal bytes will be\n        // emitted.\n\n      } while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\n    } // Copy without compression as much as possible from the input stream,\n    // return\n    // the current block state.\n    // This function does not insert new strings in the dictionary since\n    // uncompressible data is probably not useful. This function is used\n    // only for the level=0 compression option.\n    // NOTE: this function should be optimized to avoid extra copying from\n    // window to pending_buf.\n\n\n    function deflate_stored(flush) {\n      // Stored blocks are limited to 0xffff bytes, pending_buf is limited\n      // to pending_buf_size, and each stored block has a 5 byte header:\n      var max_block_size = 0xffff;\n      var max_start;\n\n      if (max_block_size > pending_buf_size - 5) {\n        max_block_size = pending_buf_size - 5;\n      } // Copy as much as possible from input to output:\n\n\n      while (true) {\n        // Fill the window as much as possible:\n        if (lookahead <= 1) {\n          fill_window();\n          if (lookahead === 0 && flush == Z_NO_FLUSH) return NeedMore;\n          if (lookahead === 0) break; // flush the current block\n        }\n\n        strstart += lookahead;\n        lookahead = 0; // Emit a stored block if pending_buf will be full:\n\n        max_start = block_start + max_block_size;\n\n        if (strstart === 0 || strstart >= max_start) {\n          // strstart === 0 is possible when wraparound on 16-bit machine\n          lookahead = strstart - max_start;\n          strstart = max_start;\n          flush_block_only(false);\n          if (strm.avail_out === 0) return NeedMore;\n        } // Flush if we may have to slide, otherwise block_start may become\n        // negative and the data will be gone:\n\n\n        if (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\n          flush_block_only(false);\n          if (strm.avail_out === 0) return NeedMore;\n        }\n      }\n\n      flush_block_only(flush == Z_FINISH);\n      if (strm.avail_out === 0) return flush == Z_FINISH ? FinishStarted : NeedMore;\n      return flush == Z_FINISH ? FinishDone : BlockDone;\n    }\n\n    function longest_match(cur_match) {\n      var chain_length = max_chain_length; // max hash chain length\n\n      var scan = strstart; // current string\n\n      var match; // matched string\n\n      var len; // length of current match\n\n      var best_len = prev_length; // best match length so far\n\n      var limit = strstart > w_size - MIN_LOOKAHEAD ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\n      var _nice_match = nice_match; // Stop when cur_match becomes <= limit. To simplify the code,\n      // we prevent matches with the string of window index 0.\n\n      var wmask = w_mask;\n      var strend = strstart + MAX_MATCH;\n      var scan_end1 = window[scan + best_len - 1];\n      var scan_end = window[scan + best_len]; // The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\n      // 16.\n      // It is easy to get rid of this optimization if necessary.\n      // Do not waste too much time if we already have a good match:\n\n      if (prev_length >= good_match) {\n        chain_length >>= 2;\n      } // Do not look for matches beyond the end of the input. This is\n      // necessary\n      // to make deflate deterministic.\n\n\n      if (_nice_match > lookahead) _nice_match = lookahead;\n\n      do {\n        match = cur_match; // Skip to next match if the match length cannot increase\n        // or if the match length is less than 2:\n\n        if (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan] || window[++match] != window[scan + 1]) continue; // The check at best_len-1 can be removed because it will be made\n        // again later. (This heuristic is not always a win.)\n        // It is not necessary to compare scan[2] and match[2] since they\n        // are always equal when the other bytes match, given that\n        // the hash keys are equal and that HASH_BITS >= 8.\n\n        scan += 2;\n        match++; // We check for insufficient lookahead only every 8th comparison;\n        // the 256th check will be made at strstart+258.\n\n        do {} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);\n\n        len = MAX_MATCH - (strend - scan);\n        scan = strend - MAX_MATCH;\n\n        if (len > best_len) {\n          match_start = cur_match;\n          best_len = len;\n          if (len >= _nice_match) break;\n          scan_end1 = window[scan + best_len - 1];\n          scan_end = window[scan + best_len];\n        }\n      } while ((cur_match = prev[cur_match & wmask] & 0xffff) > limit && --chain_length !== 0);\n\n      if (best_len <= lookahead) return best_len;\n      return lookahead;\n    } // Compress as much as possible from the input stream, return the current\n    // block state.\n    // This function does not perform lazy evaluation of matches and inserts\n    // new strings in the dictionary only for unmatched strings or for short\n    // matches. It is used only for the fast compression options.\n\n\n    function deflate_fast(flush) {\n      // short hash_head = 0; // head of the hash chain\n      var hash_head = 0; // head of the hash chain\n\n      var bflush; // set if current block must be flushed\n\n      while (true) {\n        // Make sure that we always have enough lookahead, except\n        // at the end of the input file. We need MAX_MATCH bytes\n        // for the next match, plus MIN_MATCH bytes to insert the\n        // string following the next match.\n        if (lookahead < MIN_LOOKAHEAD) {\n          fill_window();\n\n          if (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n            return NeedMore;\n          }\n\n          if (lookahead === 0) break; // flush the current block\n        } // Insert the string window[strstart .. strstart+2] in the\n        // dictionary, and set hash_head to the head of the hash chain:\n\n\n        if (lookahead >= MIN_MATCH) {\n          ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];\n\n          hash_head = head[ins_h] & 0xffff;\n          prev[strstart & w_mask] = head[ins_h];\n          head[ins_h] = strstart;\n        } // Find the longest match, discarding those <= prev_length.\n        // At this point we have always match_length < MIN_MATCH\n\n\n        if (hash_head !== 0 && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n          // To simplify the code, we prevent matches with the string\n          // of window index 0 (in particular we have to avoid a match\n          // of the string with itself at the start of the input file).\n          if (strategy != Z_HUFFMAN_ONLY) {\n            match_length = longest_match(hash_head);\n          } // longest_match() sets match_start\n\n        }\n\n        if (match_length >= MIN_MATCH) {\n          // check_match(strstart, match_start, match_length);\n          bflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\n          lookahead -= match_length; // Insert new strings in the hash table only if the match length\n          // is not too large. This saves time but degrades compression.\n\n          if (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\n            match_length--; // string at strstart already in hash table\n\n            do {\n              strstart++;\n              ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];\n\n              hash_head = head[ins_h] & 0xffff;\n              prev[strstart & w_mask] = head[ins_h];\n              head[ins_h] = strstart; // strstart never exceeds WSIZE-MAX_MATCH, so there are\n              // always MIN_MATCH bytes ahead.\n            } while (--match_length !== 0);\n\n            strstart++;\n          } else {\n            strstart += match_length;\n            match_length = 0;\n            ins_h = window[strstart] & 0xff;\n            ins_h = (ins_h << hash_shift ^ window[strstart + 1] & 0xff) & hash_mask; // If lookahead < MIN_MATCH, ins_h is garbage, but it does\n            // not\n            // matter since it will be recomputed at next deflate call.\n          }\n        } else {\n          // No match, output a literal byte\n          bflush = _tr_tally(0, window[strstart] & 0xff);\n          lookahead--;\n          strstart++;\n        }\n\n        if (bflush) {\n          flush_block_only(false);\n          if (strm.avail_out === 0) return NeedMore;\n        }\n      }\n\n      flush_block_only(flush == Z_FINISH);\n\n      if (strm.avail_out === 0) {\n        if (flush == Z_FINISH) return FinishStarted;else return NeedMore;\n      }\n\n      return flush == Z_FINISH ? FinishDone : BlockDone;\n    } // Same as above, but achieves better compression. We use a lazy\n    // evaluation for matches: a match is finally adopted only if there is\n    // no better match at the next window position.\n\n\n    function deflate_slow(flush) {\n      // short hash_head = 0; // head of hash chain\n      var hash_head = 0; // head of hash chain\n\n      var bflush; // set if current block must be flushed\n\n      var max_insert; // Process the input block.\n\n      while (true) {\n        // Make sure that we always have enough lookahead, except\n        // at the end of the input file. We need MAX_MATCH bytes\n        // for the next match, plus MIN_MATCH bytes to insert the\n        // string following the next match.\n        if (lookahead < MIN_LOOKAHEAD) {\n          fill_window();\n\n          if (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n            return NeedMore;\n          }\n\n          if (lookahead === 0) break; // flush the current block\n        } // Insert the string window[strstart .. strstart+2] in the\n        // dictionary, and set hash_head to the head of the hash chain:\n\n\n        if (lookahead >= MIN_MATCH) {\n          ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];\n\n          hash_head = head[ins_h] & 0xffff;\n          prev[strstart & w_mask] = head[ins_h];\n          head[ins_h] = strstart;\n        } // Find the longest match, discarding those <= prev_length.\n\n\n        prev_length = match_length;\n        prev_match = match_start;\n        match_length = MIN_MATCH - 1;\n\n        if (hash_head !== 0 && prev_length < max_lazy_match && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n          // To simplify the code, we prevent matches with the string\n          // of window index 0 (in particular we have to avoid a match\n          // of the string with itself at the start of the input file).\n          if (strategy != Z_HUFFMAN_ONLY) {\n            match_length = longest_match(hash_head);\n          } // longest_match() sets match_start\n\n\n          if (match_length <= 5 && (strategy == Z_FILTERED || match_length == MIN_MATCH && strstart - match_start > 4096)) {\n            // If prev_match is also MIN_MATCH, match_start is garbage\n            // but we will ignore the current match anyway.\n            match_length = MIN_MATCH - 1;\n          }\n        } // If there was a match at the previous step and the current\n        // match is not better, output the previous match:\n\n\n        if (prev_length >= MIN_MATCH && match_length <= prev_length) {\n          max_insert = strstart + lookahead - MIN_MATCH; // Do not insert strings in hash table beyond this.\n          // check_match(strstart-1, prev_match, prev_length);\n\n          bflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH); // Insert in hash table all strings up to the end of the match.\n          // strstart-1 and strstart are already inserted. If there is not\n          // enough lookahead, the last two strings are not inserted in\n          // the hash table.\n\n          lookahead -= prev_length - 1;\n          prev_length -= 2;\n\n          do {\n            if (++strstart <= max_insert) {\n              ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];\n\n              hash_head = head[ins_h] & 0xffff;\n              prev[strstart & w_mask] = head[ins_h];\n              head[ins_h] = strstart;\n            }\n          } while (--prev_length !== 0);\n\n          match_available = 0;\n          match_length = MIN_MATCH - 1;\n          strstart++;\n\n          if (bflush) {\n            flush_block_only(false);\n            if (strm.avail_out === 0) return NeedMore;\n          }\n        } else if (match_available !== 0) {\n          // If there was no match at the previous position, output a\n          // single literal. If there was a match but the current match\n          // is longer, truncate the previous match to a single literal.\n          bflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\n          if (bflush) {\n            flush_block_only(false);\n          }\n\n          strstart++;\n          lookahead--;\n          if (strm.avail_out === 0) return NeedMore;\n        } else {\n          // There is no previous match to compare with, wait for\n          // the next step to decide.\n          match_available = 1;\n          strstart++;\n          lookahead--;\n        }\n      }\n\n      if (match_available !== 0) {\n        bflush = _tr_tally(0, window[strstart - 1] & 0xff);\n        match_available = 0;\n      }\n\n      flush_block_only(flush == Z_FINISH);\n\n      if (strm.avail_out === 0) {\n        if (flush == Z_FINISH) return FinishStarted;else return NeedMore;\n      }\n\n      return flush == Z_FINISH ? FinishDone : BlockDone;\n    }\n\n    function deflateReset(strm) {\n      strm.total_in = strm.total_out = 0;\n      strm.msg = null; //\n\n      that.pending = 0;\n      that.pending_out = 0;\n      status = BUSY_STATE;\n      last_flush = Z_NO_FLUSH;\n      tr_init();\n      lm_init();\n      return Z_OK;\n    }\n\n    that.deflateInit = function (strm, _level, bits, _method, memLevel, _strategy) {\n      if (!_method) _method = Z_DEFLATED;\n      if (!memLevel) memLevel = DEF_MEM_LEVEL;\n      if (!_strategy) _strategy = Z_DEFAULT_STRATEGY; // byte[] my_version=ZLIB_VERSION;\n      //\n      // if (!version || version[0] != my_version[0]\n      // || stream_size != sizeof(z_stream)) {\n      // return Z_VERSION_ERROR;\n      // }\n\n      strm.msg = null;\n      if (_level == Z_DEFAULT_COMPRESSION) _level = 6;\n\n      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n        return Z_STREAM_ERROR;\n      }\n\n      strm.dstate = that;\n      w_bits = bits;\n      w_size = 1 << w_bits;\n      w_mask = w_size - 1;\n      hash_bits = memLevel + 7;\n      hash_size = 1 << hash_bits;\n      hash_mask = hash_size - 1;\n      hash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n      window = new Uint8Array(w_size * 2);\n      prev = [];\n      head = [];\n      lit_bufsize = 1 << memLevel + 6; // 16K elements by default\n      // We overlay pending_buf and d_buf+l_buf. This works since the average\n      // output size for (length,distance) codes is <= 24 bits.\n\n      that.pending_buf = new Uint8Array(lit_bufsize * 4);\n      pending_buf_size = lit_bufsize * 4;\n      d_buf = Math.floor(lit_bufsize / 2);\n      l_buf = (1 + 2) * lit_bufsize;\n      level = _level;\n      strategy = _strategy;\n      method = _method & 0xff;\n      return deflateReset(strm);\n    };\n\n    that.deflateEnd = function () {\n      if (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\n        return Z_STREAM_ERROR;\n      } // Deallocate in reverse order of allocations:\n\n\n      that.pending_buf = null;\n      head = null;\n      prev = null;\n      window = null; // free\n\n      that.dstate = null;\n      return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\n    };\n\n    that.deflateParams = function (strm, _level, _strategy) {\n      var err = Z_OK;\n\n      if (_level == Z_DEFAULT_COMPRESSION) {\n        _level = 6;\n      }\n\n      if (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n        return Z_STREAM_ERROR;\n      }\n\n      if (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\n        // Flush the last buffer:\n        err = strm.deflate(Z_PARTIAL_FLUSH);\n      }\n\n      if (level != _level) {\n        level = _level;\n        max_lazy_match = config_table[level].max_lazy;\n        good_match = config_table[level].good_length;\n        nice_match = config_table[level].nice_length;\n        max_chain_length = config_table[level].max_chain;\n      }\n\n      strategy = _strategy;\n      return err;\n    };\n\n    that.deflateSetDictionary = function (strm, dictionary, dictLength) {\n      var length = dictLength;\n      var n,\n          index = 0;\n      if (!dictionary || status != INIT_STATE) return Z_STREAM_ERROR;\n      if (length < MIN_MATCH) return Z_OK;\n\n      if (length > w_size - MIN_LOOKAHEAD) {\n        length = w_size - MIN_LOOKAHEAD;\n        index = dictLength - length; // use the tail of the dictionary\n      }\n\n      window.set(dictionary.subarray(index, index + length), 0);\n      strstart = length;\n      block_start = length; // Insert all strings in the hash table (except for the last two bytes).\n      // s->lookahead stays null, so s->ins_h will be recomputed at the next\n      // call of fill_window.\n\n      ins_h = window[0] & 0xff;\n      ins_h = (ins_h << hash_shift ^ window[1] & 0xff) & hash_mask;\n\n      for (n = 0; n <= length - MIN_MATCH; n++) {\n        ins_h = (ins_h << hash_shift ^ window[n + (MIN_MATCH - 1)] & 0xff) & hash_mask;\n        prev[n & w_mask] = head[ins_h];\n        head[ins_h] = n;\n      }\n\n      return Z_OK;\n    };\n\n    that.deflate = function (_strm, flush) {\n      var i, header, level_flags, old_flush, bstate;\n\n      if (flush > Z_FINISH || flush < 0) {\n        return Z_STREAM_ERROR;\n      }\n\n      if (!_strm.next_out || !_strm.next_in && _strm.avail_in !== 0 || status == FINISH_STATE && flush != Z_FINISH) {\n        _strm.msg = z_errmsg[Z_NEED_DICT - Z_STREAM_ERROR];\n        return Z_STREAM_ERROR;\n      }\n\n      if (_strm.avail_out === 0) {\n        _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];\n        return Z_BUF_ERROR;\n      }\n\n      strm = _strm; // just in case\n\n      old_flush = last_flush;\n      last_flush = flush; // Write the zlib header\n\n      if (status == INIT_STATE) {\n        header = Z_DEFLATED + (w_bits - 8 << 4) << 8;\n        level_flags = (level - 1 & 0xff) >> 1;\n        if (level_flags > 3) level_flags = 3;\n        header |= level_flags << 6;\n        if (strstart !== 0) header |= PRESET_DICT;\n        header += 31 - header % 31;\n        status = BUSY_STATE;\n        putShortMSB(header);\n      } // Flush as much pending output as possible\n\n\n      if (that.pending !== 0) {\n        strm.flush_pending();\n\n        if (strm.avail_out === 0) {\n          // console.log(\" avail_out==0\");\n          // Since avail_out is 0, deflate will be called again with\n          // more output space, but possibly with both pending and\n          // avail_in equal to zero. There won't be anything to do,\n          // but this is not an error situation so make sure we\n          // return OK instead of BUF_ERROR at next call of deflate:\n          last_flush = -1;\n          return Z_OK;\n        } // Make sure there is something to do and avoid duplicate\n        // consecutive\n        // flushes. For repeated and useless calls with Z_FINISH, we keep\n        // returning Z_STREAM_END instead of Z_BUFF_ERROR.\n\n      } else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\n        strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];\n        return Z_BUF_ERROR;\n      } // User must not provide more input after the first FINISH:\n\n\n      if (status == FINISH_STATE && strm.avail_in !== 0) {\n        _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];\n        return Z_BUF_ERROR;\n      } // Start a new block or continue the current one.\n\n\n      if (strm.avail_in !== 0 || lookahead !== 0 || flush != Z_NO_FLUSH && status != FINISH_STATE) {\n        bstate = -1;\n\n        switch (config_table[level].func) {\n          case STORED:\n            bstate = deflate_stored(flush);\n            break;\n\n          case FAST:\n            bstate = deflate_fast(flush);\n            break;\n\n          case SLOW:\n            bstate = deflate_slow(flush);\n            break;\n\n          default:\n        }\n\n        if (bstate == FinishStarted || bstate == FinishDone) {\n          status = FINISH_STATE;\n        }\n\n        if (bstate == NeedMore || bstate == FinishStarted) {\n          if (strm.avail_out === 0) {\n            last_flush = -1; // avoid BUF_ERROR next call, see above\n          }\n\n          return Z_OK; // If flush != Z_NO_FLUSH && avail_out === 0, the next call\n          // of deflate should use the same flush parameter to make sure\n          // that the flush is complete. So we don't have to output an\n          // empty block here, this will be done at next call. This also\n          // ensures that for a very small output buffer, we emit at most\n          // one empty block.\n        }\n\n        if (bstate == BlockDone) {\n          if (flush == Z_PARTIAL_FLUSH) {\n            _tr_align();\n          } else {\n            // FULL_FLUSH or SYNC_FLUSH\n            _tr_stored_block(0, 0, false); // For a full flush, this empty block will be recognized\n            // as a special marker by inflate_sync().\n\n\n            if (flush == Z_FULL_FLUSH) {\n              // state.head[s.hash_size-1]=0;\n              for (i = 0; i < hash_size\n              /*-1*/\n              ; i++) // forget history\n              head[i] = 0;\n            }\n          }\n\n          strm.flush_pending();\n\n          if (strm.avail_out === 0) {\n            last_flush = -1; // avoid BUF_ERROR at next call, see above\n\n            return Z_OK;\n          }\n        }\n      }\n\n      if (flush != Z_FINISH) return Z_OK;\n      return Z_STREAM_END;\n    };\n  } // ZStream\n\n\n  function ZStream() {\n    var that = this;\n    that.next_in_index = 0;\n    that.next_out_index = 0; // that.next_in; // next input byte\n\n    that.avail_in = 0; // number of bytes available at next_in\n\n    that.total_in = 0; // total nb of input bytes read so far\n    // that.next_out; // next output byte should be put there\n\n    that.avail_out = 0; // remaining free space at next_out\n\n    that.total_out = 0; // total nb of bytes output so far\n    // that.msg;\n    // that.dstate;\n  }\n\n  ZStream.prototype = {\n    deflateInit: function (level, bits) {\n      var that = this;\n      that.dstate = new Deflate();\n      if (!bits) bits = MAX_BITS;\n      return that.dstate.deflateInit(that, level, bits);\n    },\n    deflate: function (flush) {\n      var that = this;\n\n      if (!that.dstate) {\n        return Z_STREAM_ERROR;\n      }\n\n      return that.dstate.deflate(that, flush);\n    },\n    deflateEnd: function () {\n      var that = this;\n      if (!that.dstate) return Z_STREAM_ERROR;\n      var ret = that.dstate.deflateEnd();\n      that.dstate = null;\n      return ret;\n    },\n    deflateParams: function (level, strategy) {\n      var that = this;\n      if (!that.dstate) return Z_STREAM_ERROR;\n      return that.dstate.deflateParams(that, level, strategy);\n    },\n    deflateSetDictionary: function (dictionary, dictLength) {\n      var that = this;\n      if (!that.dstate) return Z_STREAM_ERROR;\n      return that.dstate.deflateSetDictionary(that, dictionary, dictLength);\n    },\n    // Read a new buffer from the current input stream, update the\n    // total number of bytes read. All deflate() input goes through\n    // this function so some applications may wish to modify it to avoid\n    // allocating a large strm->next_in buffer and copying from it.\n    // (See also flush_pending()).\n    read_buf: function (buf, start, size) {\n      var that = this;\n      var len = that.avail_in;\n      if (len > size) len = size;\n      if (len === 0) return 0;\n      that.avail_in -= len;\n      buf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\n      that.next_in_index += len;\n      that.total_in += len;\n      return len;\n    },\n    // Flush as much pending output as possible. All deflate() output goes\n    // through this function so some applications may wish to modify it\n    // to avoid allocating a large strm->next_out buffer and copying into it.\n    // (See also read_buf()).\n    flush_pending: function () {\n      var that = this;\n      var len = that.dstate.pending;\n      if (len > that.avail_out) len = that.avail_out;\n      if (len === 0) return; // if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\n      // || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\n      // len)) {\n      // console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\n      // that.next_out_index + \", \" + len);\n      // console.log(\"avail_out=\" + that.avail_out);\n      // }\n\n      that.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\n      that.next_out_index += len;\n      that.dstate.pending_out += len;\n      that.total_out += len;\n      that.avail_out -= len;\n      that.dstate.pending -= len;\n\n      if (that.dstate.pending === 0) {\n        that.dstate.pending_out = 0;\n      }\n    }\n  }; // Deflater\n\n  function Deflater(level) {\n    var that = this;\n    var z = new ZStream();\n    var bufsize = 512;\n    var flush = Z_NO_FLUSH;\n    var buf = new Uint8Array(bufsize);\n    if (typeof level == \"undefined\") level = Z_DEFAULT_COMPRESSION;\n    z.deflateInit(level);\n    z.next_out = buf;\n\n    that.append = function (data, onprogress) {\n      var err,\n          buffers = [],\n          lastIndex = 0,\n          bufferIndex = 0,\n          bufferSize = 0,\n          array;\n      if (!data.length) return;\n      z.next_in_index = 0;\n      z.next_in = data;\n      z.avail_in = data.length;\n\n      do {\n        z.next_out_index = 0;\n        z.avail_out = bufsize;\n        err = z.deflate(flush);\n        if (err != Z_OK) throw \"deflating: \" + z.msg;\n        if (z.next_out_index) if (z.next_out_index == bufsize) buffers.push(new Uint8Array(buf));else buffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n        bufferSize += z.next_out_index;\n\n        if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n          onprogress(z.next_in_index);\n          lastIndex = z.next_in_index;\n        }\n      } while (z.avail_in > 0 || z.avail_out === 0);\n\n      array = new Uint8Array(bufferSize);\n      buffers.forEach(function (chunk) {\n        array.set(chunk, bufferIndex);\n        bufferIndex += chunk.length;\n      });\n      return array;\n    };\n\n    that.flush = function () {\n      var err,\n          buffers = [],\n          bufferIndex = 0,\n          bufferSize = 0,\n          array;\n\n      do {\n        z.next_out_index = 0;\n        z.avail_out = bufsize;\n        err = z.deflate(Z_FINISH);\n        if (err != Z_STREAM_END && err != Z_OK) throw \"deflating: \" + z.msg;\n        if (bufsize - z.avail_out > 0) buffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n        bufferSize += z.next_out_index;\n      } while (z.avail_in > 0 || z.avail_out === 0);\n\n      z.deflateEnd();\n      array = new Uint8Array(bufferSize);\n      buffers.forEach(function (chunk) {\n        array.set(chunk, bufferIndex);\n        bufferIndex += chunk.length;\n      });\n      return array;\n    };\n  }\n\n  var deflater;\n  if (obj.zip) obj.zip.Deflater = Deflater;else {\n    deflater = new Deflater();\n    obj.addEventListener(\"message\", function (event) {\n      var message = event.data;\n\n      if (message.init) {\n        deflater = new Deflater(message.level);\n        obj.postMessage({\n          oninit: true\n        });\n      }\n\n      if (message.append) obj.postMessage({\n        onappend: true,\n        data: deflater.append(message.data, function (current) {\n          obj.postMessage({\n            progress: true,\n            current: current\n          });\n        })\n      });\n      if (message.flush) obj.postMessage({\n        onflush: true,\n        data: deflater.flush()\n      });\n    }, false);\n  }\n})(this);\n\n//# sourceURL=webpack://webpack-demo/./js/deflate.js?");

/***/ }),

/***/ "./js/inflate.js":
/*!***********************!*\
  !*** ./js/inflate.js ***!
  \***********************/
/***/ (function() {

eval("/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n(function (obj) {\n  // Global\n  var MAX_BITS = 15;\n  var Z_OK = 0;\n  var Z_STREAM_END = 1;\n  var Z_NEED_DICT = 2;\n  var Z_STREAM_ERROR = -2;\n  var Z_DATA_ERROR = -3;\n  var Z_MEM_ERROR = -4;\n  var Z_BUF_ERROR = -5;\n  var inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n  var MANY = 1440; // JZlib version : \"1.0.2\"\n\n  var Z_NO_FLUSH = 0;\n  var Z_FINISH = 4; // InfTree\n\n  var fixed_bl = 9;\n  var fixed_bd = 5;\n  var fixed_tl = [96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255];\n  var fixed_td = [80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577]; // Tables for deflate from PKZIP's appnote.txt.\n\n  var cplens = [// Copy lengths for literal codes 257..285\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]; // see note #13 above about 258\n\n  var cplext = [// Extra bits for literal codes 257..285\n  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\n  ];\n  var cpdist = [// Copy offsets for distance codes 0..29\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];\n  var cpdext = [// Extra bits for distance codes\n  0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]; // If BMAX needs to be larger than 16, then h and x[] should be uLong.\n\n  var BMAX = 15; // maximum bit length of any code\n\n  function InfTree() {\n    var that = this;\n    var hn; // hufts used in space\n\n    var v; // work area for huft_build\n\n    var c; // bit length count table\n\n    var r; // table entry for structure assignment\n\n    var u; // table stack\n\n    var x; // bit offsets, then code stack\n\n    function huft_build(b, // code lengths in bits (all assumed <=\n    // BMAX)\n    bindex, n, // number of codes (assumed <= 288)\n    s, // number of simple-valued codes (0..s-1)\n    d, // list of base values for non-simple codes\n    e, // list of extra bits for non-simple codes\n    t, // result: starting table\n    m, // maximum lookup bits, returns actual\n    hp, // space for trees\n    hn, // hufts used in space\n    v // working area: values in order of bit length\n    ) {\n      // Given a list of code lengths and a maximum table size, make a set of\n      // tables to decode that set of codes. Return Z_OK on success,\n      // Z_BUF_ERROR\n      // if the given code set is incomplete (the tables are still built in\n      // this\n      // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set\n      // of\n      // lengths), or Z_MEM_ERROR if not enough memory.\n      var a; // counter for codes of length k\n\n      var f; // i repeats in table every f entries\n\n      var g; // maximum code length\n\n      var h; // table level\n\n      var i; // counter, current code\n\n      var j; // counter\n\n      var k; // number of bits in current code\n\n      var l; // bits per table (returned in m)\n\n      var mask; // (1 << w) - 1, to avoid cc -O bug on HP\n\n      var p; // pointer into c[], b[], or v[]\n\n      var q; // points to current table\n\n      var w; // bits before this table == (l * h)\n\n      var xp; // pointer into x\n\n      var y; // number of dummy codes added\n\n      var z; // number of entries in current table\n      // Generate counts for each bit length\n\n      p = 0;\n      i = n;\n\n      do {\n        c[b[bindex + p]]++;\n        p++;\n        i--; // assume all entries <= BMAX\n      } while (i !== 0);\n\n      if (c[0] == n) {\n        // null input--all zero length codes\n        t[0] = -1;\n        m[0] = 0;\n        return Z_OK;\n      } // Find minimum and maximum length, bound *m by those\n\n\n      l = m[0];\n\n      for (j = 1; j <= BMAX; j++) if (c[j] !== 0) break;\n\n      k = j; // minimum code length\n\n      if (l < j) {\n        l = j;\n      }\n\n      for (i = BMAX; i !== 0; i--) {\n        if (c[i] !== 0) break;\n      }\n\n      g = i; // maximum code length\n\n      if (l > i) {\n        l = i;\n      }\n\n      m[0] = l; // Adjust last length count to fill out codes, if needed\n\n      for (y = 1 << j; j < i; j++, y <<= 1) {\n        if ((y -= c[j]) < 0) {\n          return Z_DATA_ERROR;\n        }\n      }\n\n      if ((y -= c[i]) < 0) {\n        return Z_DATA_ERROR;\n      }\n\n      c[i] += y; // Generate starting offsets into the value table for each length\n\n      x[1] = j = 0;\n      p = 1;\n      xp = 2;\n\n      while (--i !== 0) {\n        // note that i == g from above\n        x[xp] = j += c[p];\n        xp++;\n        p++;\n      } // Make a table of values in order of bit lengths\n\n\n      i = 0;\n      p = 0;\n\n      do {\n        if ((j = b[bindex + p]) !== 0) {\n          v[x[j]++] = i;\n        }\n\n        p++;\n      } while (++i < n);\n\n      n = x[g]; // set n to length of v\n      // Generate the Huffman codes and for each, make the table entries\n\n      x[0] = i = 0; // first Huffman code is zero\n\n      p = 0; // grab values in bit order\n\n      h = -1; // no tables yet--level -1\n\n      w = -l; // bits decoded == (l * h)\n\n      u[0] = 0; // just to keep compilers happy\n\n      q = 0; // ditto\n\n      z = 0; // ditto\n      // go through the bit lengths (k already is bits in shortest code)\n\n      for (; k <= g; k++) {\n        a = c[k];\n\n        while (a-- !== 0) {\n          // here i is the Huffman code of length k bits for value *p\n          // make tables up to required level\n          while (k > w + l) {\n            h++;\n            w += l; // previous table always l bits\n            // compute minimum size table less than or equal to l bits\n\n            z = g - w;\n            z = z > l ? l : z; // table size upper limit\n\n            if ((f = 1 << (j = k - w)) > a + 1) {\n              // try a k-w bit table\n              // too few codes for\n              // k-w bit table\n              f -= a + 1; // deduct codes from patterns left\n\n              xp = k;\n\n              if (j < z) {\n                while (++j < z) {\n                  // try smaller tables up to z bits\n                  if ((f <<= 1) <= c[++xp]) break; // enough codes to use up j bits\n\n                  f -= c[xp]; // else deduct codes from patterns\n                }\n              }\n            }\n\n            z = 1 << j; // table entries for j-bit table\n            // allocate new table\n\n            if (hn[0] + z > MANY) {\n              // (note: doesn't matter for fixed)\n              return Z_DATA_ERROR; // overflow of MANY\n            }\n\n            u[h] = q =\n            /* hp+ */\n            hn[0]; // DEBUG\n\n            hn[0] += z; // connect to last table, if there is one\n\n            if (h !== 0) {\n              x[h] = i; // save pattern for backing up\n\n              r[0] =\n              /* (byte) */\n              j; // bits in this table\n\n              r[1] =\n              /* (byte) */\n              l; // bits to dump before this table\n\n              j = i >>> w - l;\n              r[2] =\n              /* (int) */\n              q - u[h - 1] - j; // offset to this table\n\n              hp.set(r, (u[h - 1] + j) * 3); // to\n              // last\n              // table\n            } else {\n              t[0] = q; // first table is returned result\n            }\n          } // set up table entry in r\n\n\n          r[1] =\n          /* (byte) */\n          k - w;\n\n          if (p >= n) {\n            r[0] = 128 + 64; // out of values--invalid code\n          } else if (v[p] < s) {\n            r[0] =\n            /* (byte) */\n            v[p] < 256 ? 0 : 32 + 64; // 256 is\n            // end-of-block\n\n            r[2] = v[p++]; // simple code is just the value\n          } else {\n            r[0] =\n            /* (byte) */\n            e[v[p] - s] + 16 + 64; // non-simple--look\n            // up in lists\n\n            r[2] = d[v[p++] - s];\n          } // fill code-like entries with r\n\n\n          f = 1 << k - w;\n\n          for (j = i >>> w; j < z; j += f) {\n            hp.set(r, (q + j) * 3);\n          } // backwards increment the k-bit code i\n\n\n          for (j = 1 << k - 1; (i & j) !== 0; j >>>= 1) {\n            i ^= j;\n          }\n\n          i ^= j; // backup over finished tables\n\n          mask = (1 << w) - 1; // needed on HP, cc -O bug\n\n          while ((i & mask) != x[h]) {\n            h--; // don't need to update q\n\n            w -= l;\n            mask = (1 << w) - 1;\n          }\n        }\n      } // Return Z_BUF_ERROR if we were given an incomplete table\n\n\n      return y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n    }\n\n    function initWorkArea(vsize) {\n      var i;\n\n      if (!hn) {\n        hn = []; // []; //new Array(1);\n\n        v = []; // new Array(vsize);\n\n        c = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\n        r = []; // new Array(3);\n\n        u = new Int32Array(BMAX); // new Array(BMAX);\n\n        x = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n      }\n\n      if (v.length < vsize) {\n        v = []; // new Array(vsize);\n      }\n\n      for (i = 0; i < vsize; i++) {\n        v[i] = 0;\n      }\n\n      for (i = 0; i < BMAX + 1; i++) {\n        c[i] = 0;\n      }\n\n      for (i = 0; i < 3; i++) {\n        r[i] = 0;\n      } // for(int i=0; i<BMAX; i++){u[i]=0;}\n\n\n      u.set(c.subarray(0, BMAX), 0); // for(int i=0; i<BMAX+1; i++){x[i]=0;}\n\n      x.set(c.subarray(0, BMAX + 1), 0);\n    }\n\n    that.inflate_trees_bits = function (c, // 19 code lengths\n    bb, // bits tree desired/actual depth\n    tb, // bits tree result\n    hp, // space for trees\n    z // for messages\n    ) {\n      var result;\n      initWorkArea(19);\n      hn[0] = 0;\n      result = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);\n\n      if (result == Z_DATA_ERROR) {\n        z.msg = \"oversubscribed dynamic bit lengths tree\";\n      } else if (result == Z_BUF_ERROR || bb[0] === 0) {\n        z.msg = \"incomplete dynamic bit lengths tree\";\n        result = Z_DATA_ERROR;\n      }\n\n      return result;\n    };\n\n    that.inflate_trees_dynamic = function (nl, // number of literal/length codes\n    nd, // number of distance codes\n    c, // that many (total) code lengths\n    bl, // literal desired/actual bit depth\n    bd, // distance desired/actual bit depth\n    tl, // literal/length tree result\n    td, // distance tree result\n    hp, // space for trees\n    z // for messages\n    ) {\n      var result; // build literal/length tree\n\n      initWorkArea(288);\n      hn[0] = 0;\n      result = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);\n\n      if (result != Z_OK || bl[0] === 0) {\n        if (result == Z_DATA_ERROR) {\n          z.msg = \"oversubscribed literal/length tree\";\n        } else if (result != Z_MEM_ERROR) {\n          z.msg = \"incomplete literal/length tree\";\n          result = Z_DATA_ERROR;\n        }\n\n        return result;\n      } // build distance tree\n\n\n      initWorkArea(288);\n      result = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);\n\n      if (result != Z_OK || bd[0] === 0 && nl > 257) {\n        if (result == Z_DATA_ERROR) {\n          z.msg = \"oversubscribed distance tree\";\n        } else if (result == Z_BUF_ERROR) {\n          z.msg = \"incomplete distance tree\";\n          result = Z_DATA_ERROR;\n        } else if (result != Z_MEM_ERROR) {\n          z.msg = \"empty distance tree with lengths\";\n          result = Z_DATA_ERROR;\n        }\n\n        return result;\n      }\n\n      return Z_OK;\n    };\n  }\n\n  InfTree.inflate_trees_fixed = function (bl, // literal desired/actual bit depth\n  bd, // distance desired/actual bit depth\n  tl, // literal/length tree result\n  td // distance tree result\n  ) {\n    bl[0] = fixed_bl;\n    bd[0] = fixed_bd;\n    tl[0] = fixed_tl;\n    td[0] = fixed_td;\n    return Z_OK;\n  }; // InfCodes\n  // waiting for \"i:\"=input,\n  // \"o:\"=output,\n  // \"x:\"=nothing\n\n\n  var START = 0; // x: set up for LEN\n\n  var LEN = 1; // i: get length/literal/eob next\n\n  var LENEXT = 2; // i: getting length extra (have base)\n\n  var DIST = 3; // i: get distance next\n\n  var DISTEXT = 4; // i: getting distance extra\n\n  var COPY = 5; // o: copying bytes in window, waiting\n  // for space\n\n  var LIT = 6; // o: got literal, waiting for output\n  // space\n\n  var WASH = 7; // o: got eob, possibly still output\n  // waiting\n\n  var END = 8; // x: got eob and all data flushed\n\n  var BADCODE = 9; // x: got error\n\n  function InfCodes() {\n    var that = this;\n    var mode; // current inflate_codes mode\n    // mode dependent information\n\n    var len = 0;\n    var tree; // pointer into tree\n\n    var tree_index = 0;\n    var need = 0; // bits needed\n\n    var lit = 0; // if EXT or COPY, where and how much\n\n    var get = 0; // bits to get for extra\n\n    var dist = 0; // distance back to copy from\n\n    var lbits = 0; // ltree bits decoded per branch\n\n    var dbits = 0; // dtree bits decoder per branch\n\n    var ltree; // literal/length/eob tree\n\n    var ltree_index = 0; // literal/length/eob tree\n\n    var dtree; // distance tree\n\n    var dtree_index = 0; // distance tree\n    // Called with number of bytes left to write in window at least 258\n    // (the maximum string length) and number of input bytes available\n    // at least ten. The ten bytes are six bytes for the longest length/\n    // distance pair plus four bytes for overloading the bit buffer.\n\n    function inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {\n      var t; // temporary pointer\n\n      var tp; // temporary pointer\n\n      var tp_index; // temporary pointer\n\n      var e; // extra bits or operation\n\n      var b; // bit buffer\n\n      var k; // bits in bit buffer\n\n      var p; // input data pointer\n\n      var n; // bytes available there\n\n      var q; // output window write pointer\n\n      var m; // bytes to end of window or read pointer\n\n      var ml; // mask for literal/length tree\n\n      var md; // mask for distance tree\n\n      var c; // bytes to copy\n\n      var d; // distance back to copy from\n\n      var r; // copy source pointer\n\n      var tp_index_t_3; // (tp_index+t)*3\n      // load input, output, bit values\n\n      p = z.next_in_index;\n      n = z.avail_in;\n      b = s.bitb;\n      k = s.bitk;\n      q = s.write;\n      m = q < s.read ? s.read - q - 1 : s.end - q; // initialize masks\n\n      ml = inflate_mask[bl];\n      md = inflate_mask[bd]; // do until not enough input or output space for fast loop\n\n      do {\n        // assume called with m >= 258 && n >= 10\n        // get literal/length code\n        while (k < 20) {\n          // max bits for literal/length code\n          n--;\n          b |= (z.read_byte(p++) & 0xff) << k;\n          k += 8;\n        }\n\n        t = b & ml;\n        tp = tl;\n        tp_index = tl_index;\n        tp_index_t_3 = (tp_index + t) * 3;\n\n        if ((e = tp[tp_index_t_3]) === 0) {\n          b >>= tp[tp_index_t_3 + 1];\n          k -= tp[tp_index_t_3 + 1];\n          s.window[q++] =\n          /* (byte) */\n          tp[tp_index_t_3 + 2];\n          m--;\n          continue;\n        }\n\n        do {\n          b >>= tp[tp_index_t_3 + 1];\n          k -= tp[tp_index_t_3 + 1];\n\n          if ((e & 16) !== 0) {\n            e &= 15;\n            c = tp[tp_index_t_3 + 2] + (\n            /* (int) */\n            b & inflate_mask[e]);\n            b >>= e;\n            k -= e; // decode distance base of block to copy\n\n            while (k < 15) {\n              // max bits for distance code\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            t = b & md;\n            tp = td;\n            tp_index = td_index;\n            tp_index_t_3 = (tp_index + t) * 3;\n            e = tp[tp_index_t_3];\n\n            do {\n              b >>= tp[tp_index_t_3 + 1];\n              k -= tp[tp_index_t_3 + 1];\n\n              if ((e & 16) !== 0) {\n                // get extra bits to add to distance base\n                e &= 15;\n\n                while (k < e) {\n                  // get extra bits (up to 13)\n                  n--;\n                  b |= (z.read_byte(p++) & 0xff) << k;\n                  k += 8;\n                }\n\n                d = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n                b >>= e;\n                k -= e; // do the copy\n\n                m -= c;\n\n                if (q >= d) {\n                  // offset before dest\n                  // just copy\n                  r = q - d;\n\n                  if (q - r > 0 && 2 > q - r) {\n                    s.window[q++] = s.window[r++]; // minimum\n                    // count is\n                    // three,\n\n                    s.window[q++] = s.window[r++]; // so unroll\n                    // loop a\n                    // little\n\n                    c -= 2;\n                  } else {\n                    s.window.set(s.window.subarray(r, r + 2), q);\n                    q += 2;\n                    r += 2;\n                    c -= 2;\n                  }\n                } else {\n                  // else offset after destination\n                  r = q - d;\n\n                  do {\n                    r += s.end; // force pointer in window\n                  } while (r < 0); // covers invalid distances\n\n\n                  e = s.end - r;\n\n                  if (c > e) {\n                    // if source crosses,\n                    c -= e; // wrapped copy\n\n                    if (q - r > 0 && e > q - r) {\n                      do {\n                        s.window[q++] = s.window[r++];\n                      } while (--e !== 0);\n                    } else {\n                      s.window.set(s.window.subarray(r, r + e), q);\n                      q += e;\n                      r += e;\n                      e = 0;\n                    }\n\n                    r = 0; // copy rest from start of window\n                  }\n                } // copy all or what's left\n\n\n                if (q - r > 0 && c > q - r) {\n                  do {\n                    s.window[q++] = s.window[r++];\n                  } while (--c !== 0);\n                } else {\n                  s.window.set(s.window.subarray(r, r + c), q);\n                  q += c;\n                  r += c;\n                  c = 0;\n                }\n\n                break;\n              } else if ((e & 64) === 0) {\n                t += tp[tp_index_t_3 + 2];\n                t += b & inflate_mask[e];\n                tp_index_t_3 = (tp_index + t) * 3;\n                e = tp[tp_index_t_3];\n              } else {\n                z.msg = \"invalid distance code\";\n                c = z.avail_in - n;\n                c = k >> 3 < c ? k >> 3 : c;\n                n += c;\n                p -= c;\n                k -= c << 3;\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return Z_DATA_ERROR;\n              }\n            } while (true);\n\n            break;\n          }\n\n          if ((e & 64) === 0) {\n            t += tp[tp_index_t_3 + 2];\n            t += b & inflate_mask[e];\n            tp_index_t_3 = (tp_index + t) * 3;\n\n            if ((e = tp[tp_index_t_3]) === 0) {\n              b >>= tp[tp_index_t_3 + 1];\n              k -= tp[tp_index_t_3 + 1];\n              s.window[q++] =\n              /* (byte) */\n              tp[tp_index_t_3 + 2];\n              m--;\n              break;\n            }\n          } else if ((e & 32) !== 0) {\n            c = z.avail_in - n;\n            c = k >> 3 < c ? k >> 3 : c;\n            n += c;\n            p -= c;\n            k -= c << 3;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return Z_STREAM_END;\n          } else {\n            z.msg = \"invalid literal/length code\";\n            c = z.avail_in - n;\n            c = k >> 3 < c ? k >> 3 : c;\n            n += c;\n            p -= c;\n            k -= c << 3;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return Z_DATA_ERROR;\n          }\n        } while (true);\n      } while (m >= 258 && n >= 10); // not enough input or output--restore pointers and return\n\n\n      c = z.avail_in - n;\n      c = k >> 3 < c ? k >> 3 : c;\n      n += c;\n      p -= c;\n      k -= c << 3;\n      s.bitb = b;\n      s.bitk = k;\n      z.avail_in = n;\n      z.total_in += p - z.next_in_index;\n      z.next_in_index = p;\n      s.write = q;\n      return Z_OK;\n    }\n\n    that.init = function (bl, bd, tl, tl_index, td, td_index) {\n      mode = START;\n      lbits =\n      /* (byte) */\n      bl;\n      dbits =\n      /* (byte) */\n      bd;\n      ltree = tl;\n      ltree_index = tl_index;\n      dtree = td;\n      dtree_index = td_index;\n      tree = null;\n    };\n\n    that.proc = function (s, z, r) {\n      var j; // temporary storage\n\n      var tindex; // temporary pointer\n\n      var e; // extra bits or operation\n\n      var b = 0; // bit buffer\n\n      var k = 0; // bits in bit buffer\n\n      var p = 0; // input data pointer\n\n      var n; // bytes available there\n\n      var q; // output window write pointer\n\n      var m; // bytes to end of window or read pointer\n\n      var f; // pointer to copy strings from\n      // copy input/output information to locals (UPDATE macro restores)\n\n      p = z.next_in_index;\n      n = z.avail_in;\n      b = s.bitb;\n      k = s.bitk;\n      q = s.write;\n      m = q < s.read ? s.read - q - 1 : s.end - q; // process input and output based on current state\n\n      while (true) {\n        switch (mode) {\n          // waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n          case START:\n            // x: set up for LEN\n            if (m >= 258 && n >= 10) {\n              s.bitb = b;\n              s.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              s.write = q;\n              r = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);\n              p = z.next_in_index;\n              n = z.avail_in;\n              b = s.bitb;\n              k = s.bitk;\n              q = s.write;\n              m = q < s.read ? s.read - q - 1 : s.end - q;\n\n              if (r != Z_OK) {\n                mode = r == Z_STREAM_END ? WASH : BADCODE;\n                break;\n              }\n            }\n\n            need = lbits;\n            tree = ltree;\n            tree_index = ltree_index;\n            mode = LEN;\n\n          case LEN:\n            // i: get length/literal/eob next\n            j = need;\n\n            while (k < j) {\n              if (n !== 0) r = Z_OK;else {\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            tindex = (tree_index + (b & inflate_mask[j])) * 3;\n            b >>>= tree[tindex + 1];\n            k -= tree[tindex + 1];\n            e = tree[tindex];\n\n            if (e === 0) {\n              // literal\n              lit = tree[tindex + 2];\n              mode = LIT;\n              break;\n            }\n\n            if ((e & 16) !== 0) {\n              // length\n              get = e & 15;\n              len = tree[tindex + 2];\n              mode = LENEXT;\n              break;\n            }\n\n            if ((e & 64) === 0) {\n              // next table\n              need = e;\n              tree_index = tindex / 3 + tree[tindex + 2];\n              break;\n            }\n\n            if ((e & 32) !== 0) {\n              // end of block\n              mode = WASH;\n              break;\n            }\n\n            mode = BADCODE; // invalid code\n\n            z.msg = \"invalid literal/length code\";\n            r = Z_DATA_ERROR;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n\n          case LENEXT:\n            // i: getting length extra (have base)\n            j = get;\n\n            while (k < j) {\n              if (n !== 0) r = Z_OK;else {\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            len += b & inflate_mask[j];\n            b >>= j;\n            k -= j;\n            need = dbits;\n            tree = dtree;\n            tree_index = dtree_index;\n            mode = DIST;\n\n          case DIST:\n            // i: get distance next\n            j = need;\n\n            while (k < j) {\n              if (n !== 0) r = Z_OK;else {\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            tindex = (tree_index + (b & inflate_mask[j])) * 3;\n            b >>= tree[tindex + 1];\n            k -= tree[tindex + 1];\n            e = tree[tindex];\n\n            if ((e & 16) !== 0) {\n              // distance\n              get = e & 15;\n              dist = tree[tindex + 2];\n              mode = DISTEXT;\n              break;\n            }\n\n            if ((e & 64) === 0) {\n              // next table\n              need = e;\n              tree_index = tindex / 3 + tree[tindex + 2];\n              break;\n            }\n\n            mode = BADCODE; // invalid code\n\n            z.msg = \"invalid distance code\";\n            r = Z_DATA_ERROR;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n\n          case DISTEXT:\n            // i: getting distance extra\n            j = get;\n\n            while (k < j) {\n              if (n !== 0) r = Z_OK;else {\n                s.bitb = b;\n                s.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            dist += b & inflate_mask[j];\n            b >>= j;\n            k -= j;\n            mode = COPY;\n\n          case COPY:\n            // o: copying bytes in window, waiting for space\n            f = q - dist;\n\n            while (f < 0) {\n              // modulo window size-\"while\" instead\n              f += s.end; // of \"if\" handles invalid distances\n            }\n\n            while (len !== 0) {\n              if (m === 0) {\n                if (q == s.end && s.read !== 0) {\n                  q = 0;\n                  m = q < s.read ? s.read - q - 1 : s.end - q;\n                }\n\n                if (m === 0) {\n                  s.write = q;\n                  r = s.inflate_flush(z, r);\n                  q = s.write;\n                  m = q < s.read ? s.read - q - 1 : s.end - q;\n\n                  if (q == s.end && s.read !== 0) {\n                    q = 0;\n                    m = q < s.read ? s.read - q - 1 : s.end - q;\n                  }\n\n                  if (m === 0) {\n                    s.bitb = b;\n                    s.bitk = k;\n                    z.avail_in = n;\n                    z.total_in += p - z.next_in_index;\n                    z.next_in_index = p;\n                    s.write = q;\n                    return s.inflate_flush(z, r);\n                  }\n                }\n              }\n\n              s.window[q++] = s.window[f++];\n              m--;\n              if (f == s.end) f = 0;\n              len--;\n            }\n\n            mode = START;\n            break;\n\n          case LIT:\n            // o: got literal, waiting for output space\n            if (m === 0) {\n              if (q == s.end && s.read !== 0) {\n                q = 0;\n                m = q < s.read ? s.read - q - 1 : s.end - q;\n              }\n\n              if (m === 0) {\n                s.write = q;\n                r = s.inflate_flush(z, r);\n                q = s.write;\n                m = q < s.read ? s.read - q - 1 : s.end - q;\n\n                if (q == s.end && s.read !== 0) {\n                  q = 0;\n                  m = q < s.read ? s.read - q - 1 : s.end - q;\n                }\n\n                if (m === 0) {\n                  s.bitb = b;\n                  s.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  s.write = q;\n                  return s.inflate_flush(z, r);\n                }\n              }\n            }\n\n            r = Z_OK;\n            s.window[q++] =\n            /* (byte) */\n            lit;\n            m--;\n            mode = START;\n            break;\n\n          case WASH:\n            // o: got eob, possibly more output\n            if (k > 7) {\n              // return unused byte, if any\n              k -= 8;\n              n++;\n              p--; // can always return one\n            }\n\n            s.write = q;\n            r = s.inflate_flush(z, r);\n            q = s.write;\n            m = q < s.read ? s.read - q - 1 : s.end - q;\n\n            if (s.read != s.write) {\n              s.bitb = b;\n              s.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              s.write = q;\n              return s.inflate_flush(z, r);\n            }\n\n            mode = END;\n\n          case END:\n            r = Z_STREAM_END;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n\n          case BADCODE:\n            // x: got error\n            r = Z_DATA_ERROR;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n\n          default:\n            r = Z_STREAM_ERROR;\n            s.bitb = b;\n            s.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n        }\n      }\n    };\n\n    that.free = function () {// ZFREE(z, c);\n    };\n  } // InfBlocks\n  // Table for deflate from PKZIP's appnote.txt.\n\n\n  var border = [// Order of the bit length code lengths\n  16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n  var TYPE = 0; // get type bits (3, including end bit)\n\n  var LENS = 1; // get lengths for stored\n\n  var STORED = 2; // processing stored block\n\n  var TABLE = 3; // get table lengths\n\n  var BTREE = 4; // get bit lengths tree for a dynamic\n  // block\n\n  var DTREE = 5; // get length, distance trees for a\n  // dynamic block\n\n  var CODES = 6; // processing fixed or dynamic block\n\n  var DRY = 7; // output remaining window bytes\n\n  var DONELOCKS = 8; // finished last block, done\n\n  var BADBLOCKS = 9; // ot a data error--stuck here\n\n  function InfBlocks(z, w) {\n    var that = this;\n    var mode = TYPE; // current inflate_block mode\n\n    var left = 0; // if STORED, bytes left to copy\n\n    var table = 0; // table lengths (14 bits)\n\n    var index = 0; // index into blens (or border)\n\n    var blens; // bit lengths of codes\n\n    var bb = [0]; // bit length tree depth\n\n    var tb = [0]; // bit length decoding tree\n\n    var codes = new InfCodes(); // if CODES, current state\n\n    var last = 0; // true if this block is the last block\n\n    var hufts = new Int32Array(MANY * 3); // single malloc for tree space\n\n    var check = 0; // check on output\n\n    var inftree = new InfTree();\n    that.bitk = 0; // bits in bit buffer\n\n    that.bitb = 0; // bit buffer\n\n    that.window = new Uint8Array(w); // sliding window\n\n    that.end = w; // one byte after sliding window\n\n    that.read = 0; // window read pointer\n\n    that.write = 0; // window write pointer\n\n    that.reset = function (z, c) {\n      if (c) c[0] = check; // if (mode == BTREE || mode == DTREE) {\n      // }\n\n      if (mode == CODES) {\n        codes.free(z);\n      }\n\n      mode = TYPE;\n      that.bitk = 0;\n      that.bitb = 0;\n      that.read = that.write = 0;\n    };\n\n    that.reset(z, null); // copy as much as possible from the sliding window to the output area\n\n    that.inflate_flush = function (z, r) {\n      var n;\n      var p;\n      var q; // local copies of source and destination pointers\n\n      p = z.next_out_index;\n      q = that.read; // compute number of bytes to copy as far as end of window\n\n      n =\n      /* (int) */\n      (q <= that.write ? that.write : that.end) - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n !== 0 && r == Z_BUF_ERROR) r = Z_OK; // update counters\n\n      z.avail_out -= n;\n      z.total_out += n; // copy as far as end of window\n\n      z.next_out.set(that.window.subarray(q, q + n), p);\n      p += n;\n      q += n; // see if more to copy at beginning of window\n\n      if (q == that.end) {\n        // wrap pointers\n        q = 0;\n        if (that.write == that.end) that.write = 0; // compute bytes to copy\n\n        n = that.write - q;\n        if (n > z.avail_out) n = z.avail_out;\n        if (n !== 0 && r == Z_BUF_ERROR) r = Z_OK; // update counters\n\n        z.avail_out -= n;\n        z.total_out += n; // copy\n\n        z.next_out.set(that.window.subarray(q, q + n), p);\n        p += n;\n        q += n;\n      } // update pointers\n\n\n      z.next_out_index = p;\n      that.read = q; // done\n\n      return r;\n    };\n\n    that.proc = function (z, r) {\n      var t; // temporary storage\n\n      var b; // bit buffer\n\n      var k; // bits in bit buffer\n\n      var p; // input data pointer\n\n      var n; // bytes available there\n\n      var q; // output window write pointer\n\n      var m; // bytes to end of window or read pointer\n\n      var i; // copy input/output information to locals (UPDATE macro restores)\n      // {\n\n      p = z.next_in_index;\n      n = z.avail_in;\n      b = that.bitb;\n      k = that.bitk; // }\n      // {\n\n      q = that.write;\n      m =\n      /* (int) */\n      q < that.read ? that.read - q - 1 : that.end - q; // }\n      // process input based on current state\n      // DEBUG dtree\n\n      while (true) {\n        switch (mode) {\n          case TYPE:\n            while (k < 3) {\n              if (n !== 0) {\n                r = Z_OK;\n              } else {\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            t =\n            /* (int) */\n            b & 7;\n            last = t & 1;\n\n            switch (t >>> 1) {\n              case 0:\n                // stored\n                // {\n                b >>>= 3;\n                k -= 3; // }\n\n                t = k & 7; // go to byte boundary\n                // {\n\n                b >>>= t;\n                k -= t; // }\n\n                mode = LENS; // get length of stored block\n\n                break;\n\n              case 1:\n                // fixed\n                // {\n                var bl = []; // new Array(1);\n\n                var bd = []; // new Array(1);\n\n                var tl = [[]]; // new Array(1);\n\n                var td = [[]]; // new Array(1);\n\n                InfTree.inflate_trees_fixed(bl, bd, tl, td);\n                codes.init(bl[0], bd[0], tl[0], 0, td[0], 0); // }\n                // {\n\n                b >>>= 3;\n                k -= 3; // }\n\n                mode = CODES;\n                break;\n\n              case 2:\n                // dynamic\n                // {\n                b >>>= 3;\n                k -= 3; // }\n\n                mode = TABLE;\n                break;\n\n              case 3:\n                // illegal\n                // {\n                b >>>= 3;\n                k -= 3; // }\n\n                mode = BADBLOCKS;\n                z.msg = \"invalid block type\";\n                r = Z_DATA_ERROR;\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n            }\n\n            break;\n\n          case LENS:\n            while (k < 32) {\n              if (n !== 0) {\n                r = Z_OK;\n              } else {\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            if ((~b >>> 16 & 0xffff) != (b & 0xffff)) {\n              mode = BADBLOCKS;\n              z.msg = \"invalid stored block lengths\";\n              r = Z_DATA_ERROR;\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            left = b & 0xffff;\n            b = k = 0; // dump bits\n\n            mode = left !== 0 ? STORED : last !== 0 ? DRY : TYPE;\n            break;\n\n          case STORED:\n            if (n === 0) {\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            if (m === 0) {\n              if (q == that.end && that.read !== 0) {\n                q = 0;\n                m =\n                /* (int) */\n                q < that.read ? that.read - q - 1 : that.end - q;\n              }\n\n              if (m === 0) {\n                that.write = q;\n                r = that.inflate_flush(z, r);\n                q = that.write;\n                m =\n                /* (int) */\n                q < that.read ? that.read - q - 1 : that.end - q;\n\n                if (q == that.end && that.read !== 0) {\n                  q = 0;\n                  m =\n                  /* (int) */\n                  q < that.read ? that.read - q - 1 : that.end - q;\n                }\n\n                if (m === 0) {\n                  that.bitb = b;\n                  that.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  that.write = q;\n                  return that.inflate_flush(z, r);\n                }\n              }\n            }\n\n            r = Z_OK;\n            t = left;\n            if (t > n) t = n;\n            if (t > m) t = m;\n            that.window.set(z.read_buf(p, t), q);\n            p += t;\n            n -= t;\n            q += t;\n            m -= t;\n            if ((left -= t) !== 0) break;\n            mode = last !== 0 ? DRY : TYPE;\n            break;\n\n          case TABLE:\n            while (k < 14) {\n              if (n !== 0) {\n                r = Z_OK;\n              } else {\n                that.bitb = b;\n                that.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;\n                z.next_in_index = p;\n                that.write = q;\n                return that.inflate_flush(z, r);\n              }\n\n              n--;\n              b |= (z.read_byte(p++) & 0xff) << k;\n              k += 8;\n            }\n\n            table = t = b & 0x3fff;\n\n            if ((t & 0x1f) > 29 || (t >> 5 & 0x1f) > 29) {\n              mode = BADBLOCKS;\n              z.msg = \"too many length or distance symbols\";\n              r = Z_DATA_ERROR;\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            t = 258 + (t & 0x1f) + (t >> 5 & 0x1f);\n\n            if (!blens || blens.length < t) {\n              blens = []; // new Array(t);\n            } else {\n              for (i = 0; i < t; i++) {\n                blens[i] = 0;\n              }\n            } // {\n\n\n            b >>>= 14;\n            k -= 14; // }\n\n            index = 0;\n            mode = BTREE;\n\n          case BTREE:\n            while (index < 4 + (table >>> 10)) {\n              while (k < 3) {\n                if (n !== 0) {\n                  r = Z_OK;\n                } else {\n                  that.bitb = b;\n                  that.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  that.write = q;\n                  return that.inflate_flush(z, r);\n                }\n\n                n--;\n                b |= (z.read_byte(p++) & 0xff) << k;\n                k += 8;\n              }\n\n              blens[border[index++]] = b & 7; // {\n\n              b >>>= 3;\n              k -= 3; // }\n            }\n\n            while (index < 19) {\n              blens[border[index++]] = 0;\n            }\n\n            bb[0] = 7;\n            t = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);\n\n            if (t != Z_OK) {\n              r = t;\n\n              if (r == Z_DATA_ERROR) {\n                blens = null;\n                mode = BADBLOCKS;\n              }\n\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            index = 0;\n            mode = DTREE;\n\n          case DTREE:\n            while (true) {\n              t = table;\n\n              if (!(index < 258 + (t & 0x1f) + (t >> 5 & 0x1f))) {\n                break;\n              }\n\n              var j, c;\n              t = bb[0];\n\n              while (k < t) {\n                if (n !== 0) {\n                  r = Z_OK;\n                } else {\n                  that.bitb = b;\n                  that.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  that.write = q;\n                  return that.inflate_flush(z, r);\n                }\n\n                n--;\n                b |= (z.read_byte(p++) & 0xff) << k;\n                k += 8;\n              } // if (tb[0] == -1) {\n              // System.err.println(\"null...\");\n              // }\n\n\n              t = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];\n              c = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];\n\n              if (c < 16) {\n                b >>>= t;\n                k -= t;\n                blens[index++] = c;\n              } else {\n                // c == 16..18\n                i = c == 18 ? 7 : c - 14;\n                j = c == 18 ? 11 : 3;\n\n                while (k < t + i) {\n                  if (n !== 0) {\n                    r = Z_OK;\n                  } else {\n                    that.bitb = b;\n                    that.bitk = k;\n                    z.avail_in = n;\n                    z.total_in += p - z.next_in_index;\n                    z.next_in_index = p;\n                    that.write = q;\n                    return that.inflate_flush(z, r);\n                  }\n\n                  n--;\n                  b |= (z.read_byte(p++) & 0xff) << k;\n                  k += 8;\n                }\n\n                b >>>= t;\n                k -= t;\n                j += b & inflate_mask[i];\n                b >>>= i;\n                k -= i;\n                i = index;\n                t = table;\n\n                if (i + j > 258 + (t & 0x1f) + (t >> 5 & 0x1f) || c == 16 && i < 1) {\n                  blens = null;\n                  mode = BADBLOCKS;\n                  z.msg = \"invalid bit length repeat\";\n                  r = Z_DATA_ERROR;\n                  that.bitb = b;\n                  that.bitk = k;\n                  z.avail_in = n;\n                  z.total_in += p - z.next_in_index;\n                  z.next_in_index = p;\n                  that.write = q;\n                  return that.inflate_flush(z, r);\n                }\n\n                c = c == 16 ? blens[i - 1] : 0;\n\n                do {\n                  blens[i++] = c;\n                } while (--j !== 0);\n\n                index = i;\n              }\n            }\n\n            tb[0] = -1; // {\n\n            var bl_ = []; // new Array(1);\n\n            var bd_ = []; // new Array(1);\n\n            var tl_ = []; // new Array(1);\n\n            var td_ = []; // new Array(1);\n\n            bl_[0] = 9; // must be <= 9 for lookahead assumptions\n\n            bd_[0] = 6; // must be <= 9 for lookahead assumptions\n\n            t = table;\n            t = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + (t >> 5 & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);\n\n            if (t != Z_OK) {\n              if (t == Z_DATA_ERROR) {\n                blens = null;\n                mode = BADBLOCKS;\n              }\n\n              r = t;\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            codes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]); // }\n\n            mode = CODES;\n\n          case CODES:\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n\n            if ((r = codes.proc(that, z, r)) != Z_STREAM_END) {\n              return that.inflate_flush(z, r);\n            }\n\n            r = Z_OK;\n            codes.free(z);\n            p = z.next_in_index;\n            n = z.avail_in;\n            b = that.bitb;\n            k = that.bitk;\n            q = that.write;\n            m =\n            /* (int) */\n            q < that.read ? that.read - q - 1 : that.end - q;\n\n            if (last === 0) {\n              mode = TYPE;\n              break;\n            }\n\n            mode = DRY;\n\n          case DRY:\n            that.write = q;\n            r = that.inflate_flush(z, r);\n            q = that.write;\n            m =\n            /* (int) */\n            q < that.read ? that.read - q - 1 : that.end - q;\n\n            if (that.read != that.write) {\n              that.bitb = b;\n              that.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;\n              z.next_in_index = p;\n              that.write = q;\n              return that.inflate_flush(z, r);\n            }\n\n            mode = DONELOCKS;\n\n          case DONELOCKS:\n            r = Z_STREAM_END;\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n\n          case BADBLOCKS:\n            r = Z_DATA_ERROR;\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n\n          default:\n            r = Z_STREAM_ERROR;\n            that.bitb = b;\n            that.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;\n            z.next_in_index = p;\n            that.write = q;\n            return that.inflate_flush(z, r);\n        }\n      }\n    };\n\n    that.free = function (z) {\n      that.reset(z, null);\n      that.window = null;\n      hufts = null; // ZFREE(z, s);\n    };\n\n    that.set_dictionary = function (d, start, n) {\n      that.window.set(d.subarray(start, start + n), 0);\n      that.read = that.write = n;\n    }; // Returns true if inflate is currently at the end of a block generated\n    // by Z_SYNC_FLUSH or Z_FULL_FLUSH.\n\n\n    that.sync_point = function () {\n      return mode == LENS ? 1 : 0;\n    };\n  } // Inflate\n  // preset dictionary flag in zlib header\n\n\n  var PRESET_DICT = 0x20;\n  var Z_DEFLATED = 8;\n  var METHOD = 0; // waiting for method byte\n\n  var FLAG = 1; // waiting for flag byte\n\n  var DICT4 = 2; // four dictionary check bytes to go\n\n  var DICT3 = 3; // three dictionary check bytes to go\n\n  var DICT2 = 4; // two dictionary check bytes to go\n\n  var DICT1 = 5; // one dictionary check byte to go\n\n  var DICT0 = 6; // waiting for inflateSetDictionary\n\n  var BLOCKS = 7; // decompressing blocks\n\n  var DONE = 12; // finished check, done\n\n  var BAD = 13; // got an error--stay here\n\n  var mark = [0, 0, 0xff, 0xff];\n\n  function Inflate() {\n    var that = this;\n    that.mode = 0; // current inflate mode\n    // mode dependent information\n\n    that.method = 0; // if FLAGS, method byte\n    // if CHECK, check values to compare\n\n    that.was = [0]; // new Array(1); // computed check value\n\n    that.need = 0; // stream check value\n    // if BAD, inflateSync's marker bytes count\n\n    that.marker = 0; // mode independent information\n\n    that.wbits = 0; // log2(window size) (8..15, defaults to 15)\n    // this.blocks; // current inflate_blocks state\n\n    function inflateReset(z) {\n      if (!z || !z.istate) return Z_STREAM_ERROR;\n      z.total_in = z.total_out = 0;\n      z.msg = null;\n      z.istate.mode = BLOCKS;\n      z.istate.blocks.reset(z, null);\n      return Z_OK;\n    }\n\n    that.inflateEnd = function (z) {\n      if (that.blocks) that.blocks.free(z);\n      that.blocks = null; // ZFREE(z, z->state);\n\n      return Z_OK;\n    };\n\n    that.inflateInit = function (z, w) {\n      z.msg = null;\n      that.blocks = null; // set window size\n\n      if (w < 8 || w > 15) {\n        that.inflateEnd(z);\n        return Z_STREAM_ERROR;\n      }\n\n      that.wbits = w;\n      z.istate.blocks = new InfBlocks(z, 1 << w); // reset state\n\n      inflateReset(z);\n      return Z_OK;\n    };\n\n    that.inflate = function (z, f) {\n      var r;\n      var b;\n      if (!z || !z.istate || !z.next_in) return Z_STREAM_ERROR;\n      f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n      r = Z_BUF_ERROR;\n\n      while (true) {\n        // System.out.println(\"mode: \"+z.istate.mode);\n        switch (z.istate.mode) {\n          case METHOD:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n\n            if (((z.istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {\n              z.istate.mode = BAD;\n              z.msg = \"unknown compression method\";\n              z.istate.marker = 5; // can't try inflateSync\n\n              break;\n            }\n\n            if ((z.istate.method >> 4) + 8 > z.istate.wbits) {\n              z.istate.mode = BAD;\n              z.msg = \"invalid window size\";\n              z.istate.marker = 5; // can't try inflateSync\n\n              break;\n            }\n\n            z.istate.mode = FLAG;\n\n          case FLAG:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            b = z.read_byte(z.next_in_index++) & 0xff;\n\n            if (((z.istate.method << 8) + b) % 31 !== 0) {\n              z.istate.mode = BAD;\n              z.msg = \"incorrect header check\";\n              z.istate.marker = 5; // can't try inflateSync\n\n              break;\n            }\n\n            if ((b & PRESET_DICT) === 0) {\n              z.istate.mode = BLOCKS;\n              break;\n            }\n\n            z.istate.mode = DICT4;\n\n          case DICT4:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            z.istate.need = (z.read_byte(z.next_in_index++) & 0xff) << 24 & 0xff000000;\n            z.istate.mode = DICT3;\n\n          case DICT3:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            z.istate.need += (z.read_byte(z.next_in_index++) & 0xff) << 16 & 0xff0000;\n            z.istate.mode = DICT2;\n\n          case DICT2:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            z.istate.need += (z.read_byte(z.next_in_index++) & 0xff) << 8 & 0xff00;\n            z.istate.mode = DICT1;\n\n          case DICT1:\n            if (z.avail_in === 0) return r;\n            r = f;\n            z.avail_in--;\n            z.total_in++;\n            z.istate.need += z.read_byte(z.next_in_index++) & 0xff;\n            z.istate.mode = DICT0;\n            return Z_NEED_DICT;\n\n          case DICT0:\n            z.istate.mode = BAD;\n            z.msg = \"need dictionary\";\n            z.istate.marker = 0; // can try inflateSync\n\n            return Z_STREAM_ERROR;\n\n          case BLOCKS:\n            r = z.istate.blocks.proc(z, r);\n\n            if (r == Z_DATA_ERROR) {\n              z.istate.mode = BAD;\n              z.istate.marker = 0; // can try inflateSync\n\n              break;\n            }\n\n            if (r == Z_OK) {\n              r = f;\n            }\n\n            if (r != Z_STREAM_END) {\n              return r;\n            }\n\n            r = f;\n            z.istate.blocks.reset(z, z.istate.was);\n            z.istate.mode = DONE;\n\n          case DONE:\n            return Z_STREAM_END;\n\n          case BAD:\n            return Z_DATA_ERROR;\n\n          default:\n            return Z_STREAM_ERROR;\n        }\n      }\n    };\n\n    that.inflateSetDictionary = function (z, dictionary, dictLength) {\n      var index = 0;\n      var length = dictLength;\n      if (!z || !z.istate || z.istate.mode != DICT0) return Z_STREAM_ERROR;\n\n      if (length >= 1 << z.istate.wbits) {\n        length = (1 << z.istate.wbits) - 1;\n        index = dictLength - length;\n      }\n\n      z.istate.blocks.set_dictionary(dictionary, index, length);\n      z.istate.mode = BLOCKS;\n      return Z_OK;\n    };\n\n    that.inflateSync = function (z) {\n      var n; // number of bytes to look at\n\n      var p; // pointer to bytes\n\n      var m; // number of marker bytes found in a row\n\n      var r, w; // temporaries to save total_in and total_out\n      // set up\n\n      if (!z || !z.istate) return Z_STREAM_ERROR;\n\n      if (z.istate.mode != BAD) {\n        z.istate.mode = BAD;\n        z.istate.marker = 0;\n      }\n\n      if ((n = z.avail_in) === 0) return Z_BUF_ERROR;\n      p = z.next_in_index;\n      m = z.istate.marker; // search\n\n      while (n !== 0 && m < 4) {\n        if (z.read_byte(p) == mark[m]) {\n          m++;\n        } else if (z.read_byte(p) !== 0) {\n          m = 0;\n        } else {\n          m = 4 - m;\n        }\n\n        p++;\n        n--;\n      } // restore\n\n\n      z.total_in += p - z.next_in_index;\n      z.next_in_index = p;\n      z.avail_in = n;\n      z.istate.marker = m; // return no joy or set up to restart on a new block\n\n      if (m != 4) {\n        return Z_DATA_ERROR;\n      }\n\n      r = z.total_in;\n      w = z.total_out;\n      inflateReset(z);\n      z.total_in = r;\n      z.total_out = w;\n      z.istate.mode = BLOCKS;\n      return Z_OK;\n    }; // Returns true if inflate is currently at the end of a block generated\n    // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n    // implementation to provide an additional safety check. PPP uses\n    // Z_SYNC_FLUSH\n    // but removes the length bytes of the resulting empty stored block. When\n    // decompressing, PPP checks that at the end of input packet, inflate is\n    // waiting for these length bytes.\n\n\n    that.inflateSyncPoint = function (z) {\n      if (!z || !z.istate || !z.istate.blocks) return Z_STREAM_ERROR;\n      return z.istate.blocks.sync_point();\n    };\n  } // ZStream\n\n\n  function ZStream() {}\n\n  ZStream.prototype = {\n    inflateInit: function (bits) {\n      var that = this;\n      that.istate = new Inflate();\n      if (!bits) bits = MAX_BITS;\n      return that.istate.inflateInit(that, bits);\n    },\n    inflate: function (f) {\n      var that = this;\n      if (!that.istate) return Z_STREAM_ERROR;\n      return that.istate.inflate(that, f);\n    },\n    inflateEnd: function () {\n      var that = this;\n      if (!that.istate) return Z_STREAM_ERROR;\n      var ret = that.istate.inflateEnd(that);\n      that.istate = null;\n      return ret;\n    },\n    inflateSync: function () {\n      var that = this;\n      if (!that.istate) return Z_STREAM_ERROR;\n      return that.istate.inflateSync(that);\n    },\n    inflateSetDictionary: function (dictionary, dictLength) {\n      var that = this;\n      if (!that.istate) return Z_STREAM_ERROR;\n      return that.istate.inflateSetDictionary(that, dictionary, dictLength);\n    },\n    read_byte: function (start) {\n      var that = this;\n      return that.next_in.subarray(start, start + 1)[0];\n    },\n    read_buf: function (start, size) {\n      var that = this;\n      return that.next_in.subarray(start, start + size);\n    }\n  }; // Inflater\n\n  function Inflater() {\n    var that = this;\n    var z = new ZStream();\n    var bufsize = 512;\n    var flush = Z_NO_FLUSH;\n    var buf = new Uint8Array(bufsize);\n    var nomoreinput = false;\n    z.inflateInit();\n    z.next_out = buf;\n\n    that.append = function (data, onprogress) {\n      var err,\n          buffers = [],\n          lastIndex = 0,\n          bufferIndex = 0,\n          bufferSize = 0,\n          array;\n      if (data.length === 0) return;\n      z.next_in_index = 0;\n      z.next_in = data;\n      z.avail_in = data.length;\n\n      do {\n        z.next_out_index = 0;\n        z.avail_out = bufsize;\n\n        if (z.avail_in === 0 && !nomoreinput) {\n          // if buffer is empty and more input is available, refill it\n          z.next_in_index = 0;\n          nomoreinput = true;\n        }\n\n        err = z.inflate(flush);\n        if (nomoreinput && err == Z_BUF_ERROR) return -1;\n        if (err != Z_OK && err != Z_STREAM_END) throw \"inflating: \" + z.msg;\n        if ((nomoreinput || err == Z_STREAM_END) && z.avail_in == data.length) return -1;\n        if (z.next_out_index) if (z.next_out_index == bufsize) buffers.push(new Uint8Array(buf));else buffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n        bufferSize += z.next_out_index;\n\n        if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n          onprogress(z.next_in_index);\n          lastIndex = z.next_in_index;\n        }\n      } while (z.avail_in > 0 || z.avail_out === 0);\n\n      array = new Uint8Array(bufferSize);\n      buffers.forEach(function (chunk) {\n        array.set(chunk, bufferIndex);\n        bufferIndex += chunk.length;\n      });\n      return array;\n    };\n\n    that.flush = function () {\n      z.inflateEnd();\n    };\n  }\n\n  var inflater;\n  if (obj.zip) obj.zip.Inflater = Inflater;else {\n    inflater = new Inflater();\n    obj.addEventListener(\"message\", function (event) {\n      var message = event.data;\n      if (message.append) obj.postMessage({\n        onappend: true,\n        data: inflater.append(message.data, function (current) {\n          obj.postMessage({\n            progress: true,\n            current: current\n          });\n        })\n      });\n\n      if (message.flush) {\n        inflater.flush();\n        obj.postMessage({\n          onflush: true\n        });\n      }\n    }, false);\n  }\n})(this);\n\n//# sourceURL=webpack://webpack-demo/./js/inflate.js?");

/***/ }),

/***/ "./js/monocore.js":
/*!************************!*\
  !*** ./js/monocore.js ***!
  \************************/
/***/ (() => {

eval("throw new Error(\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\nSyntaxError: /home/jaime/webpack-demo/js/monocore.js: Deleting local variable in strict mode. (3490:10)\\n\\n\\u001b[0m \\u001b[90m 3488 |\\u001b[39m           div\\u001b[33m.\\u001b[39mappendChild(node\\u001b[33m.\\u001b[39mcloneNode(\\u001b[36mtrue\\u001b[39m))\\u001b[33m;\\u001b[39m\\u001b[0m\\n\\u001b[0m \\u001b[90m 3489 |\\u001b[39m           srcs\\u001b[33m.\\u001b[39mpush(div\\u001b[33m.\\u001b[39minnerHTML)\\u001b[33m;\\u001b[39m\\u001b[0m\\n\\u001b[0m\\u001b[31m\\u001b[1m>\\u001b[22m\\u001b[39m\\u001b[90m 3490 |\\u001b[39m           \\u001b[36mdelete\\u001b[39m(div)\\u001b[33m;\\u001b[39m\\u001b[0m\\n\\u001b[0m \\u001b[90m      |\\u001b[39m           \\u001b[31m\\u001b[1m^\\u001b[22m\\u001b[39m\\u001b[0m\\n\\u001b[0m \\u001b[90m 3491 |\\u001b[39m         }\\u001b[0m\\n\\u001b[0m \\u001b[90m 3492 |\\u001b[39m       }\\u001b[0m\\n\\u001b[0m \\u001b[90m 3493 |\\u001b[39m       p\\u001b[33m.\\u001b[39msource \\u001b[33m=\\u001b[39m { html\\u001b[33m:\\u001b[39m srcs\\u001b[33m.\\u001b[39mjoin(\\u001b[32m''\\u001b[39m) }\\u001b[33m;\\u001b[39m\\u001b[0m\\n    at instantiate (/home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:72:32)\\n    at constructor (/home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:367:12)\\n    at Parser.raise (/home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:3678:19)\\n    at Parser.parseMaybeUnary (/home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:12720:16)\\n    at Parser.parseMaybeUnaryOrPrivate (/home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:12530:61)\\n    at Parser.parseExprOps (/home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:12537:23)\\n    at Parser.parseMaybeConditional (/home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:12507:23)\\n    at Parser.parseMaybeAssign (/home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:12459:21)\\n    at Parser.parseExpressionBase (/home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:12395:23)\\n    at /home/jaime/webpack-demo/node_modules/@babel/parser/lib/index.js:12389:39\");\n\n//# sourceURL=webpack://webpack-demo/./js/monocore.js?");

/***/ }),

/***/ "./js/monoctrl.js":
/*!************************!*\
  !*** ./js/monoctrl.js ***!
  \************************/
/***/ (() => {

eval("Monocle.Controls.Contents = function (reader) {\n  var API = {\n    constructor: Monocle.Controls.Contents\n  };\n  var k = API.constants = API.constructor;\n  var p = API.properties = {\n    reader: reader\n  };\n\n  function createControlElements() {\n    var div = reader.dom.make('div', 'controls_contents_container');\n    contentsForBook(div, reader.getBook());\n    return div;\n  }\n\n  function contentsForBook(div, book) {\n    while (div.hasChildNodes()) {\n      div.removeChild(div.firstChild);\n    }\n\n    var list = div.dom.append('ol', 'controls_contents_list');\n    var contents = book.properties.contents;\n\n    for (var i = 0; i < contents.length; ++i) {\n      chapterBuilder(list, contents[i], 0);\n    }\n  }\n\n  function chapterBuilder(list, chp, padLvl) {\n    var index = list.childNodes.length;\n    var li = list.dom.append('li', 'controls_contents_chapter', index);\n    var span = li.dom.append('span', 'controls_contents_chapterTitle', index, {\n      html: chp.title\n    });\n    span.style.paddingLeft = padLvl + \"em\";\n\n    var invoked = function () {\n      p.reader.skipToChapter(chp.src);\n      p.reader.hideControl(API);\n    };\n\n    Monocle.Events.listenForTap(li, invoked, 'controls_contents_chapter_active');\n\n    if (chp.children) {\n      for (var i = 0; i < chp.children.length; ++i) {\n        chapterBuilder(list, chp.children[i], padLvl + 1);\n      }\n    }\n  }\n\n  API.createControlElements = createControlElements;\n  return API;\n};\n\nMonocle.Controls.Magnifier = function (reader) {\n  var API = {\n    constructor: Monocle.Controls.Magnifier\n  };\n  var k = API.constants = API.constructor;\n  var p = API.properties = {\n    buttons: [],\n    magnified: false\n  };\n\n  function initialize() {\n    p.reader = reader;\n  }\n\n  function createControlElements(holder) {\n    var btn = holder.dom.make('div', 'controls_magnifier_button');\n    btn.smallA = btn.dom.append('span', 'controls_magnifier_a', {\n      text: 'A'\n    });\n    btn.largeA = btn.dom.append('span', 'controls_magnifier_A', {\n      text: 'A'\n    });\n    p.buttons.push(btn);\n    Monocle.Events.listenForTap(btn, toggleMagnification);\n    return btn;\n  }\n\n  function toggleMagnification(evt) {\n    var opacities;\n    p.magnified = !p.magnified;\n\n    if (p.magnified) {\n      opacities = [0.3, 1];\n      p.reader.formatting.setFontScale(k.MAGNIFICATION, true);\n    } else {\n      opacities = [1, 0.3];\n      p.reader.formatting.setFontScale(null, true);\n    }\n\n    for (var i = 0; i < p.buttons.length; i++) {\n      p.buttons[i].smallA.style.opacity = opacities[0];\n      p.buttons[i].largeA.style.opacity = opacities[1];\n    }\n  }\n\n  API.createControlElements = createControlElements;\n  initialize();\n  return API;\n};\n\nMonocle.Controls.Magnifier.MAGNIFICATION = 1.2; // A panel is an invisible column of interactivity. When contact occurs\n// (mousedown, touchstart), the panel expands to the full width of its\n// container, to catch all interaction events and prevent them from hitting\n// other things.\n//\n// Panels are used primarily to provide hit zones for page flipping\n// interactions, but you can do whatever you like with them.\n//\n// After instantiating a panel and adding it to the reader as a control,\n// you can call listenTo() with a hash of methods for any of 'start', 'move'\n// 'end' and 'cancel'.\n//\n\nMonocle.Controls.Panel = function () {\n  var API = {\n    constructor: Monocle.Controls.Panel\n  };\n  var k = API.constants = API.constructor;\n  var p = API.properties = {\n    evtCallbacks: {}\n  };\n\n  function createControlElements(cntr) {\n    p.div = cntr.dom.make('div', k.CLS.panel);\n    p.div.dom.setStyles(k.DEFAULT_STYLES);\n    Monocle.Events.listenForContact(p.div, {\n      'start': start,\n      'move': move,\n      'end': end,\n      'cancel': cancel\n    }, {\n      useCapture: false\n    });\n    return p.div;\n  }\n\n  function setDirection(dir) {\n    p.direction = dir;\n  }\n\n  function listenTo(evtCallbacks) {\n    p.evtCallbacks = evtCallbacks;\n  }\n\n  function deafen() {\n    p.evtCallbacks = {};\n  }\n\n  function start(evt) {\n    p.contact = true;\n    evt.m.offsetX += p.div.offsetLeft;\n    evt.m.offsetY += p.div.offsetTop;\n    expand();\n    invoke('start', evt);\n  }\n\n  function move(evt) {\n    if (!p.contact) {\n      return;\n    }\n\n    invoke('move', evt);\n  }\n\n  function end(evt) {\n    if (!p.contact) {\n      return;\n    }\n\n    Monocle.Events.deafenForContact(p.div, p.listeners);\n    contract();\n    p.contact = false;\n    invoke('end', evt);\n  }\n\n  function cancel(evt) {\n    if (!p.contact) {\n      return;\n    }\n\n    Monocle.Events.deafenForContact(p.div, p.listeners);\n    contract();\n    p.contact = false;\n    invoke('cancel', evt);\n  }\n\n  function invoke(evtType, evt) {\n    if (p.evtCallbacks[evtType]) {\n      p.evtCallbacks[evtType](p.direction, evt.m.offsetX, evt.m.offsetY, API);\n    }\n\n    evt.preventDefault();\n  }\n\n  function expand() {\n    if (p.expanded) {\n      return;\n    }\n\n    p.div.dom.addClass(k.CLS.expanded);\n    p.expanded = true;\n  }\n\n  function contract(evt) {\n    if (!p.expanded) {\n      return;\n    }\n\n    p.div.dom.removeClass(k.CLS.expanded);\n    p.expanded = false;\n  }\n\n  API.createControlElements = createControlElements;\n  API.listenTo = listenTo;\n  API.deafen = deafen;\n  API.expand = expand;\n  API.contract = contract;\n  API.setDirection = setDirection;\n  return API;\n};\n\nMonocle.Controls.Panel.CLS = {\n  panel: 'panel',\n  expanded: 'controls_panel_expanded'\n};\nMonocle.Controls.Panel.DEFAULT_STYLES = {\n  position: 'absolute',\n  height: '100%'\n};\n\nMonocle.Controls.PlaceSaver = function (bookId) {\n  var API = {\n    constructor: Monocle.Controls.PlaceSaver\n  };\n  var k = API.constants = API.constructor;\n  var p = API.properties = {};\n\n  function initialize() {\n    applyToBook(bookId);\n  }\n\n  function assignToReader(reader) {\n    p.reader = reader;\n    p.reader.listen('monocle:turn', savePlaceToCookie);\n  }\n\n  function applyToBook(bookId) {\n    p.bkTitle = bookId.toLowerCase().replace(/[^a-z0-9]/g, '');\n    p.prefix = k.COOKIE_NAMESPACE + p.bkTitle + \".\";\n  }\n\n  function setCookie(key, value, days) {\n    var expires = \"\";\n\n    if (days) {\n      var d = new Date();\n      d.setTime(d.getTime() + days * 24 * 60 * 60 * 1000);\n      expires = \"; expires=\" + d.toGMTString();\n    }\n\n    var path = \"; path=/\";\n    document.cookie = p.prefix + key + \"=\" + value + expires + path;\n    return value;\n  }\n\n  function getCookie(key) {\n    if (!document.cookie) {\n      return null;\n    }\n\n    var regex = new RegExp(p.prefix + key + \"=(.+?)(;|$)\");\n    var matches = document.cookie.match(regex);\n\n    if (matches) {\n      return matches[1];\n    } else {\n      return null;\n    }\n  }\n\n  function savePlaceToCookie() {\n    var place = p.reader.getPlace();\n    setCookie(\"component\", encodeURIComponent(place.componentId()), k.COOKIE_EXPIRES_IN_DAYS);\n    setCookie(\"percent\", place.percentageThrough(), k.COOKIE_EXPIRES_IN_DAYS);\n  }\n\n  function savedPlace() {\n    var locus = {\n      componentId: getCookie('component'),\n      percent: getCookie('percent')\n    };\n\n    if (locus.componentId && locus.percent) {\n      locus.componentId = decodeURIComponent(locus.componentId);\n      locus.percent = parseFloat(locus.percent);\n      return locus;\n    } else {\n      return null;\n    }\n  }\n\n  function restorePlace() {\n    var locus = savedPlace();\n\n    if (locus) {\n      p.reader.moveTo(locus);\n    }\n  }\n\n  API.assignToReader = assignToReader;\n  API.savedPlace = savedPlace;\n  API.restorePlace = restorePlace;\n  initialize();\n  return API;\n};\n\nMonocle.Controls.PlaceSaver.COOKIE_NAMESPACE = \"monocle.controls.placesaver.\";\nMonocle.Controls.PlaceSaver.COOKIE_EXPIRES_IN_DAYS = 7; // Set to 0 for session-based expiry.\n\n;\n\nMonocle.Controls.Scrubber = function (reader) {\n  var API = {\n    constructor: Monocle.Controls.Scrubber\n  };\n  var k = API.constants = API.constructor;\n  var p = API.properties = {};\n\n  function initialize() {\n    p.reader = reader;\n    p.reader.listen('monocle:turn', updateNeedles);\n    updateNeedles();\n  }\n\n  function pixelToPlace(x, cntr) {\n    if (!p.componentIds) {\n      p.componentIds = p.reader.getBook().properties.componentIds;\n      p.componentWidth = 100 / p.componentIds.length;\n    }\n\n    var pc = x / cntr.offsetWidth * 100;\n    var cmpt = p.componentIds[Math.floor(pc / p.componentWidth)];\n    var cmptPc = pc % p.componentWidth / p.componentWidth;\n    return {\n      componentId: cmpt,\n      percentageThrough: cmptPc\n    };\n  }\n\n  function placeToPixel(place, cntr) {\n    if (!p.componentIds) {\n      p.componentIds = p.reader.getBook().properties.componentIds;\n      p.componentWidth = 100 / p.componentIds.length;\n    }\n\n    var componentIndex = p.componentIds.indexOf(place.componentId());\n    var pc = p.componentWidth * componentIndex;\n    pc += place.percentageThrough() * p.componentWidth;\n    return Math.round(pc / 100 * cntr.offsetWidth);\n  }\n\n  function updateNeedles() {\n    if (p.hidden || !p.reader.dom.find(k.CLS.container)) {\n      return;\n    }\n\n    var place = p.reader.getPlace();\n    var x = placeToPixel(place, p.reader.dom.find(k.CLS.container));\n    var needle,\n        i = 0;\n\n    for (var i = 0, needle; needle = p.reader.dom.find(k.CLS.needle, i); ++i) {\n      setX(needle, x - needle.offsetWidth / 2);\n      p.reader.dom.find(k.CLS.trail, i).style.width = x + \"px\";\n    }\n  }\n\n  function setX(node, x) {\n    var cntr = p.reader.dom.find(k.CLS.container);\n    x = Math.min(cntr.offsetWidth - node.offsetWidth, x);\n    x = Math.max(x, 0);\n    Monocle.Styles.setX(node, x);\n  }\n\n  function createControlElements(holder) {\n    var cntr = holder.dom.make('div', k.CLS.container);\n    var track = cntr.dom.append('div', k.CLS.track);\n    var needleTrail = cntr.dom.append('div', k.CLS.trail);\n    var needle = cntr.dom.append('div', k.CLS.needle);\n    var bubble = cntr.dom.append('div', k.CLS.bubble);\n    var cntrListeners, bodyListeners;\n\n    var moveEvt = function (evt, x) {\n      evt.preventDefault();\n      x = typeof x == \"number\" ? x : evt.m.registrantX;\n      var place = pixelToPlace(x, cntr);\n      setX(needle, x - needle.offsetWidth / 2);\n      var book = p.reader.getBook();\n      var chps = book.chaptersForComponent(place.componentId);\n      var cmptIndex = p.componentIds.indexOf(place.componentId);\n      var chp = chps[Math.floor(chps.length * place.percentageThrough)];\n\n      if (cmptIndex > -1 && book.properties.components[cmptIndex]) {\n        var actualPlace = Monocle.Place.FromPercentageThrough(book.properties.components[cmptIndex], place.percentageThrough);\n        chp = actualPlace.chapterInfo() || chp;\n      }\n\n      if (chp) {\n        bubble.innerHTML = chp.title;\n      }\n\n      setX(bubble, x - bubble.offsetWidth / 2);\n      p.lastX = x;\n      return place;\n    };\n\n    var endEvt = function (evt) {\n      var place = moveEvt(evt, p.lastX);\n      p.reader.moveTo({\n        percent: place.percentageThrough,\n        componentId: place.componentId\n      });\n      Monocle.Events.deafenForContact(cntr, cntrListeners);\n      Monocle.Events.deafenForContact(document.body, bodyListeners);\n      bubble.style.display = \"none\";\n    };\n\n    var startFn = function (evt) {\n      bubble.style.display = \"block\";\n      moveEvt(evt);\n      cntrListeners = Monocle.Events.listenForContact(cntr, {\n        move: moveEvt\n      });\n      bodyListeners = Monocle.Events.listenForContact(document.body, {\n        end: endEvt\n      });\n    };\n\n    Monocle.Events.listenForContact(cntr, {\n      start: startFn\n    });\n    return cntr;\n  }\n\n  API.createControlElements = createControlElements;\n  API.updateNeedles = updateNeedles;\n  initialize();\n  return API;\n};\n\nMonocle.Controls.Scrubber.CLS = {\n  container: 'controls_scrubber_container',\n  track: 'controls_scrubber_track',\n  needle: 'controls_scrubber_needle',\n  trail: 'controls_scrubber_trail',\n  bubble: 'controls_scrubber_bubble'\n};\n\nMonocle.Controls.Spinner = function (reader) {\n  var API = {\n    constructor: Monocle.Controls.Spinner\n  };\n  var k = API.constants = API.constructor;\n  var p = API.properties = {\n    reader: reader,\n    divs: [],\n    spinCount: 0,\n    repeaters: {},\n    showForPages: []\n  };\n\n  function createControlElements(cntr) {\n    var anim = cntr.dom.make('div', 'controls_spinner_anim');\n    p.divs.push(anim);\n    return anim;\n  }\n\n  function registerSpinEvt(startEvtType, stopEvtType) {\n    var label = startEvtType;\n    p.reader.listen(startEvtType, function (evt) {\n      spin(label, evt);\n    });\n    p.reader.listen(stopEvtType, function (evt) {\n      spun(label, evt);\n    });\n  } // Registers spin/spun event handlers for certain time-consuming events.\n  //\n\n\n  function listenForUsualDelays() {\n    registerSpinEvt('monocle:componentloading', 'monocle:componentloaded');\n    registerSpinEvt('monocle:componentchanging', 'monocle:componentchange');\n    registerSpinEvt('monocle:resizing', 'monocle:resize');\n    registerSpinEvt('monocle:jumping', 'monocle:jump');\n    registerSpinEvt('monocle:recalculating', 'monocle:recalculated');\n  } // Displays the spinner. Both arguments are optional.\n  //\n\n\n  function spin(label, evt) {\n    label = label || k.GENERIC_LABEL; //console.log('Spinning on ' + (evt ? evt.type : label));\n\n    p.repeaters[label] = true;\n    p.reader.showControl(API); // If the delay is on a page other than the page we've been assigned to,\n    // don't show the animation. p.global ensures that if an event affects\n    // all pages, the animation is always shown, even if other events in this\n    // spin cycle are page-specific.\n\n    var page = evt && evt.m && evt.m.page ? evt.m.page : null;\n\n    if (!page) {\n      p.global = true;\n    }\n\n    for (var i = 0; i < p.divs.length; ++i) {\n      var owner = p.divs[i].parentNode.parentNode;\n\n      if (page == owner) {\n        p.showForPages.push(page);\n      }\n\n      var show = p.global || p.showForPages.indexOf(page) >= 0;\n      p.divs[i].style.display = show ? 'block' : 'none';\n    }\n  } // Stops displaying the spinner. Both arguments are optional.\n  //\n\n\n  function spun(label, evt) {\n    label = label || k.GENERIC_LABEL; //console.log('Spun on ' + (evt ? evt.type : label));\n\n    p.repeaters[label] = false;\n\n    for (var l in p.repeaters) {\n      if (p.repeaters[l]) {\n        return;\n      }\n    }\n\n    p.global = false;\n    p.showForPages = [];\n    p.reader.hideControl(API);\n  }\n\n  API.createControlElements = createControlElements;\n  API.listenForUsualDelays = listenForUsualDelays;\n  API.spin = spin;\n  API.spun = spun;\n  return API;\n};\n\nMonocle.Controls.Spinner.GENERIC_LABEL = \"generic\";\n\nMonocle.Controls.Stencil = function (reader, behaviorClasses) {\n  var API = {\n    constructor: Monocle.Controls.Stencil\n  };\n  var k = API.constants = API.constructor;\n  var p = API.properties = {\n    reader: reader,\n    behaviors: [],\n    components: {},\n    masks: []\n  }; // Create the stencil container and listen for draw/update events.\n  //\n\n  function createControlElements(holder) {\n    behaviorClasses = behaviorClasses || k.DEFAULT_BEHAVIORS;\n\n    for (var i = 0, ii = behaviorClasses.length; i < ii; ++i) {\n      addBehavior(behaviorClasses[i]);\n    }\n\n    p.container = holder.dom.make('div', k.CLS.container);\n    p.reader.listen('monocle:turning', hide);\n    p.reader.listen('monocle:turn:cancel', show);\n    p.reader.listen('monocle:turn', update);\n    p.reader.listen('monocle:stylesheetchange', update);\n    p.reader.listen('monocle:resize', update);\n    update();\n    return p.container;\n  } // Pass this method an object that responds to 'findElements(doc)' with\n  // an array of DOM elements for that document, and to 'fitMask(elem, mask)'.\n  //\n  // After you have added all your behaviors this way, you would typically\n  // call update() to make them take effect immediately.\n  //\n\n\n  function addBehavior(bhvrClass) {\n    var bhvr = new bhvrClass(API);\n\n    if (typeof bhvr.findElements != 'function') {\n      console.warn('Missing \"findElements\" method for behavior: %o', bhvr);\n    }\n\n    if (typeof bhvr.fitMask != 'function') {\n      console.warn('Missing \"fitMask\" method for behavior: %o', bhvr);\n    }\n\n    p.behaviors.push(bhvr);\n  } // Resets any pre-calculated rectangles for the active component,\n  // recalculates them, and forces masks to be \"drawn\" (moved into the new\n  // rectangular locations).\n  //\n\n\n  function update() {\n    var visPages = p.reader.visiblePages();\n\n    if (!visPages || !visPages.length) {\n      return;\n    }\n\n    var pageDiv = visPages[0];\n    var cmptId = pageComponentId(pageDiv);\n\n    if (!cmptId) {\n      return;\n    }\n\n    p.components[cmptId] = null;\n    calculateRectangles(pageDiv);\n    draw();\n  }\n\n  function hide() {\n    p.container.style.display = 'none';\n  }\n\n  function show() {\n    p.container.style.display = 'block';\n  } // Removes any existing masks.\n\n\n  function clear() {\n    while (p.container.childNodes.length) {\n      p.container.removeChild(p.container.lastChild);\n    }\n  } // Aligns the stencil container to the shape of the page, then moves the\n  // masks to sit above any currently visible rectangles.\n  //\n\n\n  function draw() {\n    var pageDiv = p.reader.visiblePages()[0];\n    var cmptId = pageComponentId(pageDiv);\n\n    if (!p.components[cmptId]) {\n      return;\n    } // Position the container.\n\n\n    alignToComponent(pageDiv); // Clear old masks.\n\n    clear(); // Layout the masks.\n\n    if (!p.disabled) {\n      show();\n      var rects = p.components[cmptId];\n\n      if (rects && rects.length) {\n        layoutRectangles(pageDiv, rects);\n      }\n    }\n  } // Iterate over all the <a> elements in the active component, and\n  // create an array of rectangular points corresponding to their positions.\n  //\n\n\n  function calculateRectangles(pageDiv) {\n    var cmptId = pageComponentId(pageDiv);\n\n    if (!p.components[cmptId]) {\n      p.components[cmptId] = [];\n    } else {\n      return;\n    }\n\n    var doc = pageDiv.m.activeFrame.contentDocument;\n    var offset = getOffset(pageDiv);\n\n    for (var b = 0, bb = p.behaviors.length; b < bb; ++b) {\n      var bhvr = p.behaviors[b];\n      var elems = bhvr.findElements(doc);\n\n      for (var i = 0; i < elems.length; ++i) {\n        var elem = elems[i];\n\n        if (elem.getClientRects) {\n          var r = elem.getClientRects();\n\n          for (var j = 0; j < r.length; j++) {\n            p.components[cmptId].push({\n              element: elem,\n              behavior: bhvr,\n              left: Math.ceil(r[j].left + offset.l),\n              top: Math.ceil(r[j].top),\n              width: Math.floor(r[j].width),\n              height: Math.floor(r[j].height)\n            });\n          }\n        }\n      }\n    }\n\n    return p.components[cmptId];\n  } // Update location of visible rectangles - creating as required.\n  //\n\n\n  function layoutRectangles(pageDiv, rects) {\n    var offset = getOffset(pageDiv);\n    var visRects = [];\n\n    for (var i = 0; i < rects.length; ++i) {\n      if (rectVisible(rects[i], offset.l, offset.l + offset.w)) {\n        visRects.push(rects[i]);\n      }\n    }\n\n    for (i = 0; i < visRects.length; ++i) {\n      var r = visRects[i];\n      var cr = {\n        left: r.left - offset.l,\n        top: r.top,\n        width: r.width,\n        height: r.height\n      };\n      var mask = createMask(r.element, r.behavior);\n      mask.dom.setStyles({\n        display: 'block',\n        left: cr.left + \"px\",\n        top: cr.top + \"px\",\n        width: cr.width + \"px\",\n        height: cr.height + \"px\",\n        position: 'absolute'\n      });\n      mask.stencilRect = cr;\n    }\n  } // Find the offset position in pixels from the left of the current page.\n  //\n\n\n  function getOffset(pageDiv) {\n    return {\n      l: pageDiv.m.offset || 0,\n      w: pageDiv.m.dimensions.properties.width\n    };\n  } // Is this area presently on the screen?\n  //\n\n\n  function rectVisible(rect, l, r) {\n    return rect.left >= l && rect.left < r;\n  } // Returns the active component id for the given page, or the current\n  // page if no argument passed in.\n  //\n\n\n  function pageComponentId(pageDiv) {\n    pageDiv = pageDiv || p.reader.visiblePages()[0];\n\n    if (!pageDiv.m.activeFrame.m.component) {\n      return;\n    }\n\n    return pageDiv.m.activeFrame.m.component.properties.id;\n  } // Positions the stencil container over the active frame.\n  //\n\n\n  function alignToComponent(pageDiv) {\n    cmpt = pageDiv.m.activeFrame.parentNode;\n    p.container.dom.setStyles({\n      left: cmpt.offsetLeft + \"px\",\n      top: cmpt.offsetTop + \"px\"\n    });\n  }\n\n  function createMask(element, bhvr) {\n    var mask = p.container.dom.append(bhvr.maskTagName || 'div', k.CLS.mask);\n    Monocle.Events.listenForContact(mask, {\n      start: function () {\n        p.reader.dispatchEvent('monocle:magic:halt');\n      },\n      move: function (evt) {\n        evt.preventDefault();\n      },\n      end: function () {\n        p.reader.dispatchEvent('monocle:magic:init');\n      }\n    });\n    bhvr.fitMask(element, mask);\n    return mask;\n  } // Make the active masks visible (by giving them a class -- override style\n  // in monoctrl.css).\n  //\n\n\n  function toggleHighlights() {\n    var cls = k.CLS.highlights;\n\n    if (p.container.dom.hasClass(cls)) {\n      p.container.dom.removeClass(cls);\n    } else {\n      p.container.dom.addClass(cls);\n    }\n  }\n\n  function disable() {\n    p.disabled = true;\n    draw();\n  }\n\n  function enable() {\n    p.disabled = false;\n    draw();\n  }\n\n  function filterElement(elem, behavior) {\n    if (typeof behavior.filterElement == 'function') {\n      return behavior.filterElement(elem);\n    }\n\n    return elem;\n  }\n\n  function maskAssigned(elem, mask, behavior) {\n    if (typeof behavior.maskAssigned == 'function') {\n      return behavior.maskAssigned(elem, mask);\n    }\n\n    return false;\n  }\n\n  API.createControlElements = createControlElements;\n  API.addBehavior = addBehavior;\n  API.draw = draw;\n  API.update = update;\n  API.toggleHighlights = toggleHighlights;\n  return API;\n};\n\nMonocle.Controls.Stencil.CLS = {\n  container: 'controls_stencil_container',\n  mask: 'controls_stencil_mask',\n  highlights: 'controls_stencil_highlighted'\n};\n\nMonocle.Controls.Stencil.Links = function (stencil) {\n  var API = {\n    constructor: Monocle.Controls.Stencil.Links\n  }; // Optionally specify the HTML tagname of the mask.\n\n  API.maskTagName = 'a'; // Returns an array of all the elements in the given doc that should\n  // be covered with a stencil mask for interactivity.\n  //\n  // (Hint: doc.querySelectorAll() is your friend.)\n  //\n\n  API.findElements = function (doc) {\n    return doc.querySelectorAll('a[href]');\n  }; // Return an element. It should usually be a child of the container element,\n  // with a className of the given maskClass. You set up the interactivity of\n  // the mask element here.\n  //\n\n\n  API.fitMask = function (link, mask) {\n    var hrefObject = deconstructHref(link);\n\n    if (hrefObject.internal) {\n      mask.setAttribute('href', 'javascript:\"Skip to chapter\"');\n      Monocle.Events.listen(mask, 'click', function (evt) {\n        stencil.properties.reader.skipToChapter(hrefObject.internal);\n        evt.preventDefault();\n      });\n    } else {\n      mask.setAttribute('href', hrefObject.external);\n      mask.setAttribute('target', '_blank');\n      link.setAttribute('target', '_blank'); // For good measure.\n    }\n  }; // Returns an object with either:\n  //\n  // - an 'external' property -- an absolute URL with a protocol,\n  // host & etc, which should be treated as an external resource (eg,\n  // open in new window)\n  //\n  //   OR\n  //\n  // - an 'internal' property -- a relative URL (with optional hash anchor),\n  //  that is treated as a link to component in the book\n  //\n  // A weird but useful property of <a> tags is that while\n  // link.getAttribute('href') will return the actual string value of the\n  // attribute (eg, 'foo.html'), link.href will return the absolute URL (eg,\n  // 'http://example.com/monocles/foo.html').\n  //\n\n\n  function deconstructHref(elem) {\n    var url = elem.href;\n\n    if (!elem.getAttribute('target')) {\n      var m = url.match(/([^#]*)(#.*)?$/);\n      var path = m[1];\n      var anchor = m[2] || '';\n      var cmpts = stencil.properties.reader.getBook().properties.componentIds;\n\n      for (var i = 0, ii = cmpts.length; i < ii; ++i) {\n        if (path.substr(0 - cmpts[i].length) == cmpts[i]) {\n          return {\n            internal: cmpts[i] + anchor\n          };\n        }\n      }\n    }\n\n    return {\n      external: url\n    };\n  }\n\n  return API;\n};\n\nMonocle.Controls.Stencil.DEFAULT_BEHAVIORS = [Monocle.Controls.Stencil.Links];\n\n//# sourceURL=webpack://webpack-demo/./js/monoctrl.js?");

/***/ }),

/***/ "./js/zip.js":
/*!*******************!*\
  !*** ./js/zip.js ***!
  \*******************/
/***/ (function() {

eval("/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n(function (obj) {\n  var ERR_BAD_FORMAT = \"File format is not recognized.\";\n  var ERR_ENCRYPTED = \"File contains encrypted entry.\";\n  var ERR_ZIP64 = \"File is using Zip64 (4gb+ file size).\";\n  var ERR_READ = \"Error while reading zip file.\";\n  var ERR_WRITE = \"Error while writing zip file.\";\n  var ERR_WRITE_DATA = \"Error while writing file data.\";\n  var ERR_READ_DATA = \"Error while reading file data.\";\n  var ERR_DUPLICATED_NAME = \"File already exists.\";\n  var CHUNK_SIZE = 512 * 1024;\n  var INFLATE_JS = \"inflate.js\";\n  var DEFLATE_JS = \"deflate.js\";\n  var TEXT_PLAIN = \"text/plain\";\n  var MESSAGE_EVENT = \"message\";\n  var appendABViewSupported;\n\n  try {\n    appendABViewSupported = new Blob([new DataView(new ArrayBuffer(0))]).size === 0;\n  } catch (e) {}\n\n  function Crc32() {\n    var crc = -1,\n        that = this;\n\n    that.append = function (data) {\n      var offset,\n          table = that.table;\n\n      for (offset = 0; offset < data.length; offset++) crc = crc >>> 8 ^ table[(crc ^ data[offset]) & 0xFF];\n    };\n\n    that.get = function () {\n      return ~crc;\n    };\n  }\n\n  Crc32.prototype.table = function () {\n    var i,\n        j,\n        t,\n        table = [];\n\n    for (i = 0; i < 256; i++) {\n      t = i;\n\n      for (j = 0; j < 8; j++) if (t & 1) t = t >>> 1 ^ 0xEDB88320;else t = t >>> 1;\n\n      table[i] = t;\n    }\n\n    return table;\n  }();\n\n  function blobSlice(blob, index, length) {\n    if (blob.slice) return blob.slice(index, index + length);else if (blob.webkitSlice) return blob.webkitSlice(index, index + length);else if (blob.mozSlice) return blob.mozSlice(index, index + length);else if (blob.msSlice) return blob.msSlice(index, index + length);\n  }\n\n  function getDataHelper(byteLength, bytes) {\n    var dataBuffer, dataArray;\n    dataBuffer = new ArrayBuffer(byteLength);\n    dataArray = new Uint8Array(dataBuffer);\n    if (bytes) dataArray.set(bytes, 0);\n    return {\n      buffer: dataBuffer,\n      array: dataArray,\n      view: new DataView(dataBuffer)\n    };\n  } // Readers\n\n\n  function Reader() {}\n\n  function TextReader(text) {\n    var that = this,\n        blobReader;\n\n    function init(callback, onerror) {\n      var blob = new Blob([text], {\n        type: TEXT_PLAIN\n      });\n      blobReader = new BlobReader(blob);\n      blobReader.init(function () {\n        that.size = blobReader.size;\n        callback();\n      }, onerror);\n    }\n\n    function readUint8Array(index, length, callback, onerror) {\n      blobReader.readUint8Array(index, length, callback, onerror);\n    }\n\n    that.size = 0;\n    that.init = init;\n    that.readUint8Array = readUint8Array;\n  }\n\n  TextReader.prototype = new Reader();\n  TextReader.prototype.constructor = TextReader;\n\n  function Data64URIReader(dataURI) {\n    var that = this,\n        dataStart;\n\n    function init(callback) {\n      var dataEnd = dataURI.length;\n\n      while (dataURI.charAt(dataEnd - 1) == \"=\") dataEnd--;\n\n      dataStart = dataURI.indexOf(\",\") + 1;\n      that.size = Math.floor((dataEnd - dataStart) * 0.75);\n      callback();\n    }\n\n    function readUint8Array(index, length, callback) {\n      var i,\n          data = getDataHelper(length);\n      var start = Math.floor(index / 3) * 4;\n      var end = Math.ceil((index + length) / 3) * 4;\n      var bytes = obj.atob(dataURI.substring(start + dataStart, end + dataStart));\n      var delta = index - Math.floor(start / 4) * 3;\n\n      for (i = delta; i < delta + length; i++) data.array[i - delta] = bytes.charCodeAt(i);\n\n      callback(data.array);\n    }\n\n    that.size = 0;\n    that.init = init;\n    that.readUint8Array = readUint8Array;\n  }\n\n  Data64URIReader.prototype = new Reader();\n  Data64URIReader.prototype.constructor = Data64URIReader;\n\n  function BlobReader(blob) {\n    var that = this;\n\n    function init(callback) {\n      this.size = blob.size;\n      callback();\n    }\n\n    function readUint8Array(index, length, callback, onerror) {\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        callback(new Uint8Array(e.target.result));\n      };\n\n      reader.onerror = onerror;\n      reader.readAsArrayBuffer(blobSlice(blob, index, length));\n    }\n\n    that.size = 0;\n    that.init = init;\n    that.readUint8Array = readUint8Array;\n  }\n\n  BlobReader.prototype = new Reader();\n  BlobReader.prototype.constructor = BlobReader; // Writers\n\n  function Writer() {}\n\n  Writer.prototype.getData = function (callback) {\n    callback(this.data);\n  };\n\n  function TextWriter(encoding) {\n    var that = this,\n        blob;\n\n    function init(callback) {\n      blob = new Blob([], {\n        type: TEXT_PLAIN\n      });\n      callback();\n    }\n\n    function writeUint8Array(array, callback) {\n      blob = new Blob([blob, appendABViewSupported ? array : array.buffer], {\n        type: TEXT_PLAIN\n      });\n      callback();\n    }\n\n    function getData(callback, onerror) {\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        callback(e.target.result);\n      };\n\n      reader.onerror = onerror;\n      reader.readAsText(blob, encoding);\n    }\n\n    that.init = init;\n    that.writeUint8Array = writeUint8Array;\n    that.getData = getData;\n  }\n\n  TextWriter.prototype = new Writer();\n  TextWriter.prototype.constructor = TextWriter;\n\n  function Data64URIWriter(contentType) {\n    var that = this,\n        data = \"\",\n        pending = \"\";\n\n    function init(callback) {\n      data += \"data:\" + (contentType || \"\") + \";base64,\";\n      callback();\n    }\n\n    function writeUint8Array(array, callback) {\n      var i,\n          delta = pending.length,\n          dataString = pending;\n      pending = \"\";\n\n      for (i = 0; i < Math.floor((delta + array.length) / 3) * 3 - delta; i++) dataString += String.fromCharCode(array[i]);\n\n      for (; i < array.length; i++) pending += String.fromCharCode(array[i]);\n\n      if (dataString.length > 2) data += obj.btoa(dataString);else pending = dataString;\n      callback();\n    }\n\n    function getData(callback) {\n      callback(data + obj.btoa(pending));\n    }\n\n    that.init = init;\n    that.writeUint8Array = writeUint8Array;\n    that.getData = getData;\n  }\n\n  Data64URIWriter.prototype = new Writer();\n  Data64URIWriter.prototype.constructor = Data64URIWriter;\n\n  function BlobWriter(contentType) {\n    var blob,\n        that = this;\n\n    function init(callback) {\n      blob = new Blob([], {\n        type: contentType\n      });\n      callback();\n    }\n\n    function writeUint8Array(array, callback) {\n      blob = new Blob([blob, appendABViewSupported ? array : array.buffer], {\n        type: contentType\n      });\n      callback();\n    }\n\n    function getData(callback) {\n      callback(blob);\n    }\n\n    that.init = init;\n    that.writeUint8Array = writeUint8Array;\n    that.getData = getData;\n  }\n\n  BlobWriter.prototype = new Writer();\n  BlobWriter.prototype.constructor = BlobWriter; // inflate/deflate core functions\n\n  function launchWorkerProcess(worker, reader, writer, offset, size, onappend, onprogress, onend, onreaderror, onwriteerror) {\n    var chunkIndex = 0,\n        index,\n        outputSize;\n\n    function onflush() {\n      worker.removeEventListener(MESSAGE_EVENT, onmessage, false);\n      onend(outputSize);\n    }\n\n    function onmessage(event) {\n      var message = event.data,\n          data = message.data;\n\n      if (message.onappend) {\n        outputSize += data.length;\n        writer.writeUint8Array(data, function () {\n          onappend(false, data);\n          step();\n        }, onwriteerror);\n      }\n\n      if (message.onflush) if (data) {\n        outputSize += data.length;\n        writer.writeUint8Array(data, function () {\n          onappend(false, data);\n          onflush();\n        }, onwriteerror);\n      } else onflush();\n      if (message.progress && onprogress) onprogress(index + message.current, size);\n    }\n\n    function step() {\n      index = chunkIndex * CHUNK_SIZE;\n      if (index < size) reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function (array) {\n        worker.postMessage({\n          append: true,\n          data: array\n        });\n        chunkIndex++;\n        if (onprogress) onprogress(index, size);\n        onappend(true, array);\n      }, onreaderror);else worker.postMessage({\n        flush: true\n      });\n    }\n\n    outputSize = 0;\n    worker.addEventListener(MESSAGE_EVENT, onmessage, false);\n    step();\n  }\n\n  function launchProcess(process, reader, writer, offset, size, onappend, onprogress, onend, onreaderror, onwriteerror) {\n    var chunkIndex = 0,\n        index,\n        outputSize = 0;\n\n    function step() {\n      var outputData;\n      index = chunkIndex * CHUNK_SIZE;\n      if (index < size) reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function (inputData) {\n        var outputData = process.append(inputData, function () {\n          if (onprogress) onprogress(offset + index, size);\n        });\n        outputSize += outputData.length;\n        onappend(true, inputData);\n        writer.writeUint8Array(outputData, function () {\n          onappend(false, outputData);\n          chunkIndex++;\n          setTimeout(step, 1);\n        }, onwriteerror);\n        if (onprogress) onprogress(index, size);\n      }, onreaderror);else {\n        outputData = process.flush();\n\n        if (outputData) {\n          outputSize += outputData.length;\n          writer.writeUint8Array(outputData, function () {\n            onappend(false, outputData);\n            onend(outputSize);\n          }, onwriteerror);\n        } else onend(outputSize);\n      }\n    }\n\n    step();\n  }\n\n  function inflate(reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {\n    var worker,\n        crc32 = new Crc32();\n\n    function oninflateappend(sending, array) {\n      if (computeCrc32 && !sending) crc32.append(array);\n    }\n\n    function oninflateend(outputSize) {\n      onend(outputSize, crc32.get());\n    }\n\n    if (obj.zip.useWebWorkers) {\n      worker = new Worker(obj.zip.workerScriptsPath + INFLATE_JS);\n      launchWorkerProcess(worker, reader, writer, offset, size, oninflateappend, onprogress, oninflateend, onreaderror, onwriteerror);\n    } else launchProcess(new obj.zip.Inflater(), reader, writer, offset, size, oninflateappend, onprogress, oninflateend, onreaderror, onwriteerror);\n\n    return worker;\n  }\n\n  function deflate(reader, writer, level, onend, onprogress, onreaderror, onwriteerror) {\n    var worker,\n        crc32 = new Crc32();\n\n    function ondeflateappend(sending, array) {\n      if (sending) crc32.append(array);\n    }\n\n    function ondeflateend(outputSize) {\n      onend(outputSize, crc32.get());\n    }\n\n    function onmessage() {\n      worker.removeEventListener(MESSAGE_EVENT, onmessage, false);\n      launchWorkerProcess(worker, reader, writer, 0, reader.size, ondeflateappend, onprogress, ondeflateend, onreaderror, onwriteerror);\n    }\n\n    if (obj.zip.useWebWorkers) {\n      worker = new Worker(obj.zip.workerScriptsPath + DEFLATE_JS);\n      worker.addEventListener(MESSAGE_EVENT, onmessage, false);\n      worker.postMessage({\n        init: true,\n        level: level\n      });\n    } else launchProcess(new obj.zip.Deflater(), reader, writer, 0, reader.size, ondeflateappend, onprogress, ondeflateend, onreaderror, onwriteerror);\n\n    return worker;\n  }\n\n  function copy(reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {\n    var chunkIndex = 0,\n        crc32 = new Crc32();\n\n    function step() {\n      var index = chunkIndex * CHUNK_SIZE;\n      if (index < size) reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function (array) {\n        if (computeCrc32) crc32.append(array);\n        if (onprogress) onprogress(index, size, array);\n        writer.writeUint8Array(array, function () {\n          chunkIndex++;\n          step();\n        }, onwriteerror);\n      }, onreaderror);else onend(size, crc32.get());\n    }\n\n    step();\n  } // ZipReader\n\n\n  function decodeASCII(str) {\n    var i,\n        out = \"\",\n        charCode,\n        extendedASCII = ['\\u00C7', '\\u00FC', '\\u00E9', '\\u00E2', '\\u00E4', '\\u00E0', '\\u00E5', '\\u00E7', '\\u00EA', '\\u00EB', '\\u00E8', '\\u00EF', '\\u00EE', '\\u00EC', '\\u00C4', '\\u00C5', '\\u00C9', '\\u00E6', '\\u00C6', '\\u00F4', '\\u00F6', '\\u00F2', '\\u00FB', '\\u00F9', '\\u00FF', '\\u00D6', '\\u00DC', '\\u00F8', '\\u00A3', '\\u00D8', '\\u00D7', '\\u0192', '\\u00E1', '\\u00ED', '\\u00F3', '\\u00FA', '\\u00F1', '\\u00D1', '\\u00AA', '\\u00BA', '\\u00BF', '\\u00AE', '\\u00AC', '\\u00BD', '\\u00BC', '\\u00A1', '\\u00AB', '\\u00BB', '_', '_', '_', '\\u00A6', '\\u00A6', '\\u00C1', '\\u00C2', '\\u00C0', '\\u00A9', '\\u00A6', '\\u00A6', '+', '+', '\\u00A2', '\\u00A5', '+', '+', '-', '-', '+', '-', '+', '\\u00E3', '\\u00C3', '+', '+', '-', '-', '\\u00A6', '-', '+', '\\u00A4', '\\u00F0', '\\u00D0', '\\u00CA', '\\u00CB', '\\u00C8', 'i', '\\u00CD', '\\u00CE', '\\u00CF', '+', '+', '_', '_', '\\u00A6', '\\u00CC', '_', '\\u00D3', '\\u00DF', '\\u00D4', '\\u00D2', '\\u00F5', '\\u00D5', '\\u00B5', '\\u00FE', '\\u00DE', '\\u00DA', '\\u00DB', '\\u00D9', '\\u00FD', '\\u00DD', '\\u00AF', '\\u00B4', '\\u00AD', '\\u00B1', '_', '\\u00BE', '\\u00B6', '\\u00A7', '\\u00F7', '\\u00B8', '\\u00B0', '\\u00A8', '\\u00B7', '\\u00B9', '\\u00B3', '\\u00B2', '_', ' '];\n\n    for (i = 0; i < str.length; i++) {\n      charCode = str.charCodeAt(i) & 0xFF;\n      if (charCode > 127) out += extendedASCII[charCode - 128];else out += String.fromCharCode(charCode);\n    }\n\n    return out;\n  }\n\n  function decodeUTF8(string) {\n    return decodeURIComponent(escape(string));\n  }\n\n  function getString(bytes) {\n    var i,\n        str = \"\";\n\n    for (i = 0; i < bytes.length; i++) str += String.fromCharCode(bytes[i]);\n\n    return str;\n  }\n\n  function getDate(timeRaw) {\n    var date = (timeRaw & 0xffff0000) >> 16,\n        time = timeRaw & 0x0000ffff;\n\n    try {\n      return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5, (time & 0x001F) * 2, 0);\n    } catch (e) {}\n  }\n\n  function readCommonHeader(entry, data, index, centralDirectory, onerror) {\n    entry.version = data.view.getUint16(index, true);\n    entry.bitFlag = data.view.getUint16(index + 2, true);\n    entry.compressionMethod = data.view.getUint16(index + 4, true);\n    entry.lastModDateRaw = data.view.getUint32(index + 6, true);\n    entry.lastModDate = getDate(entry.lastModDateRaw);\n\n    if ((entry.bitFlag & 0x01) === 0x01) {\n      onerror(ERR_ENCRYPTED);\n      return;\n    }\n\n    if (centralDirectory || (entry.bitFlag & 0x0008) != 0x0008) {\n      entry.crc32 = data.view.getUint32(index + 10, true);\n      entry.compressedSize = data.view.getUint32(index + 14, true);\n      entry.uncompressedSize = data.view.getUint32(index + 18, true);\n    }\n\n    if (entry.compressedSize === 0xFFFFFFFF || entry.uncompressedSize === 0xFFFFFFFF) {\n      onerror(ERR_ZIP64);\n      return;\n    }\n\n    entry.filenameLength = data.view.getUint16(index + 22, true);\n    entry.extraFieldLength = data.view.getUint16(index + 24, true);\n  }\n\n  function createZipReader(reader, onerror) {\n    function Entry() {}\n\n    Entry.prototype.getData = function (writer, onend, onprogress, checkCrc32) {\n      var that = this,\n          worker;\n\n      function terminate(callback, param) {\n        if (worker) worker.terminate();\n        worker = null;\n        if (callback) callback(param);\n      }\n\n      function testCrc32(crc32) {\n        var dataCrc32 = getDataHelper(4);\n        dataCrc32.view.setUint32(0, crc32);\n        return that.crc32 == dataCrc32.view.getUint32(0);\n      }\n\n      function getWriterData(uncompressedSize, crc32) {\n        if (checkCrc32 && !testCrc32(crc32)) onreaderror();else writer.getData(function (data) {\n          terminate(onend, data);\n        });\n      }\n\n      function onreaderror() {\n        terminate(onerror, ERR_READ_DATA);\n      }\n\n      function onwriteerror() {\n        terminate(onerror, ERR_WRITE_DATA);\n      }\n\n      reader.readUint8Array(that.offset, 30, function (bytes) {\n        var data = getDataHelper(bytes.length, bytes),\n            dataOffset;\n\n        if (data.view.getUint32(0) != 0x504b0304) {\n          onerror(ERR_BAD_FORMAT);\n          return;\n        }\n\n        readCommonHeader(that, data, 4, false, onerror);\n        dataOffset = that.offset + 30 + that.filenameLength + that.extraFieldLength;\n        writer.init(function () {\n          if (that.compressionMethod === 0) copy(reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);else worker = inflate(reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);\n        }, onwriteerror);\n      }, onreaderror);\n    };\n\n    function seekEOCDR(offset, entriesCallback) {\n      reader.readUint8Array(reader.size - offset, offset, function (bytes) {\n        var dataView = getDataHelper(bytes.length, bytes).view;\n\n        if (dataView.getUint32(0) != 0x504b0506) {\n          seekEOCDR(offset + 1, entriesCallback);\n        } else {\n          entriesCallback(dataView);\n        }\n      }, function () {\n        onerror(ERR_READ);\n      });\n    }\n\n    return {\n      getEntries: function (callback) {\n        if (reader.size < 22) {\n          onerror(ERR_BAD_FORMAT);\n          return;\n        } // look for End of central directory record\n\n\n        seekEOCDR(22, function (dataView) {\n          var datalength, fileslength;\n          datalength = dataView.getUint32(16, true);\n          fileslength = dataView.getUint16(8, true);\n          reader.readUint8Array(datalength, reader.size - datalength, function (bytes) {\n            var i,\n                index = 0,\n                entries = [],\n                entry,\n                filename,\n                comment,\n                data = getDataHelper(bytes.length, bytes);\n\n            for (i = 0; i < fileslength; i++) {\n              entry = new Entry();\n\n              if (data.view.getUint32(index) != 0x504b0102) {\n                onerror(ERR_BAD_FORMAT);\n                return;\n              }\n\n              readCommonHeader(entry, data, index + 6, true, onerror);\n              entry.commentLength = data.view.getUint16(index + 32, true);\n              entry.directory = (data.view.getUint8(index + 38) & 0x10) == 0x10;\n              entry.offset = data.view.getUint32(index + 42, true);\n              filename = getString(data.array.subarray(index + 46, index + 46 + entry.filenameLength));\n              entry.filename = (entry.bitFlag & 0x0800) === 0x0800 ? decodeUTF8(filename) : decodeASCII(filename);\n              if (!entry.directory && entry.filename.charAt(entry.filename.length - 1) == \"/\") entry.directory = true;\n              comment = getString(data.array.subarray(index + 46 + entry.filenameLength + entry.extraFieldLength, index + 46 + entry.filenameLength + entry.extraFieldLength + entry.commentLength));\n              entry.comment = (entry.bitFlag & 0x0800) === 0x0800 ? decodeUTF8(comment) : decodeASCII(comment);\n              entries.push(entry);\n              index += 46 + entry.filenameLength + entry.extraFieldLength + entry.commentLength;\n            }\n\n            callback(entries);\n          }, function () {\n            onerror(ERR_READ);\n          });\n        });\n      },\n      close: function (callback) {\n        if (callback) callback();\n      }\n    };\n  } // ZipWriter\n\n\n  function encodeUTF8(string) {\n    return unescape(encodeURIComponent(string));\n  }\n\n  function getBytes(str) {\n    var i,\n        array = [];\n\n    for (i = 0; i < str.length; i++) array.push(str.charCodeAt(i));\n\n    return array;\n  }\n\n  function createZipWriter(writer, onerror, dontDeflate) {\n    var worker,\n        files = {},\n        filenames = [],\n        datalength = 0;\n\n    function terminate(callback, message) {\n      if (worker) worker.terminate();\n      worker = null;\n      if (callback) callback(message);\n    }\n\n    function onwriteerror() {\n      terminate(onerror, ERR_WRITE);\n    }\n\n    function onreaderror() {\n      terminate(onerror, ERR_READ_DATA);\n    }\n\n    return {\n      add: function (name, reader, onend, onprogress, options) {\n        var header, filename, date;\n\n        function writeHeader(callback) {\n          var data;\n          date = options.lastModDate || new Date();\n          header = getDataHelper(26);\n          files[name] = {\n            headerArray: header.array,\n            directory: options.directory,\n            filename: filename,\n            offset: datalength,\n            comment: getBytes(encodeUTF8(options.comment || \"\"))\n          };\n          header.view.setUint32(0, 0x14000808);\n          if (options.version) header.view.setUint8(0, options.version);\n          if (!dontDeflate && options.level !== 0 && !options.directory) header.view.setUint16(4, 0x0800);\n          header.view.setUint16(6, (date.getHours() << 6 | date.getMinutes()) << 5 | date.getSeconds() / 2, true);\n          header.view.setUint16(8, (date.getFullYear() - 1980 << 4 | date.getMonth() + 1) << 5 | date.getDate(), true);\n          header.view.setUint16(22, filename.length, true);\n          data = getDataHelper(30 + filename.length);\n          data.view.setUint32(0, 0x504b0304);\n          data.array.set(header.array, 4);\n          data.array.set(filename, 30);\n          datalength += data.array.length;\n          writer.writeUint8Array(data.array, callback, onwriteerror);\n        }\n\n        function writeFooter(compressedLength, crc32) {\n          var footer = getDataHelper(16);\n          datalength += compressedLength || 0;\n          footer.view.setUint32(0, 0x504b0708);\n\n          if (typeof crc32 != \"undefined\") {\n            header.view.setUint32(10, crc32, true);\n            footer.view.setUint32(4, crc32, true);\n          }\n\n          if (reader) {\n            footer.view.setUint32(8, compressedLength, true);\n            header.view.setUint32(14, compressedLength, true);\n            footer.view.setUint32(12, reader.size, true);\n            header.view.setUint32(18, reader.size, true);\n          }\n\n          writer.writeUint8Array(footer.array, function () {\n            datalength += 16;\n            terminate(onend);\n          }, onwriteerror);\n        }\n\n        function writeFile() {\n          options = options || {};\n          name = name.trim();\n          if (options.directory && name.charAt(name.length - 1) != \"/\") name += \"/\";\n\n          if (files.hasOwnProperty(name)) {\n            onerror(ERR_DUPLICATED_NAME);\n            return;\n          }\n\n          filename = getBytes(encodeUTF8(name));\n          filenames.push(name);\n          writeHeader(function () {\n            if (reader) {\n              if (dontDeflate || options.level === 0) copy(reader, writer, 0, reader.size, true, writeFooter, onprogress, onreaderror, onwriteerror);else worker = deflate(reader, writer, options.level, writeFooter, onprogress, onreaderror, onwriteerror);\n            } else writeFooter();\n          }, onwriteerror);\n        }\n\n        if (reader) reader.init(writeFile, onreaderror);else writeFile();\n      },\n      close: function (callback) {\n        var data,\n            length = 0,\n            index = 0,\n            indexFilename,\n            file;\n\n        for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\n          file = files[filenames[indexFilename]];\n          length += 46 + file.filename.length + file.comment.length;\n        }\n\n        data = getDataHelper(length + 22);\n\n        for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\n          file = files[filenames[indexFilename]];\n          data.view.setUint32(index, 0x504b0102);\n          data.view.setUint16(index + 4, 0x1400);\n          data.array.set(file.headerArray, index + 6);\n          data.view.setUint16(index + 32, file.comment.length, true);\n          if (file.directory) data.view.setUint8(index + 38, 0x10);\n          data.view.setUint32(index + 42, file.offset, true);\n          data.array.set(file.filename, index + 46);\n          data.array.set(file.comment, index + 46 + file.filename.length);\n          index += 46 + file.filename.length + file.comment.length;\n        }\n\n        data.view.setUint32(index, 0x504b0506);\n        data.view.setUint16(index + 8, filenames.length, true);\n        data.view.setUint16(index + 10, filenames.length, true);\n        data.view.setUint32(index + 12, length, true);\n        data.view.setUint32(index + 16, datalength, true);\n        writer.writeUint8Array(data.array, function () {\n          terminate(function () {\n            writer.getData(callback);\n          });\n        }, onwriteerror);\n      }\n    };\n  }\n\n  obj.zip = {\n    Reader: Reader,\n    Writer: Writer,\n    BlobReader: BlobReader,\n    Data64URIReader: Data64URIReader,\n    TextReader: TextReader,\n    BlobWriter: BlobWriter,\n    Data64URIWriter: Data64URIWriter,\n    TextWriter: TextWriter,\n    createReader: function (reader, callback, onerror) {\n      reader.init(function () {\n        callback(createZipReader(reader, onerror));\n      }, onerror);\n    },\n    createWriter: function (writer, callback, onerror, dontDeflate) {\n      writer.init(function () {\n        callback(createZipWriter(writer, onerror, dontDeflate));\n      }, onerror);\n    },\n    workerScriptsPath: \"\",\n    useWebWorkers: true\n  };\n})(this);\n\n//# sourceURL=webpack://webpack-demo/./js/zip.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_modules__["./js/deflate.js"]();
/******/ 	__webpack_modules__["./js/inflate.js"]();
/******/ 	__webpack_modules__["./js/zip.js"]();
/******/ 	__webpack_modules__["./js/monocore.js"]();
/******/ 	__webpack_modules__["./js/monoctrl.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./efm.js"]();
/******/ 	
/******/ })()
;